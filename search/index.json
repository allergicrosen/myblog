[{"content":"VBA入门教程 VBA基础概述 什么是VBA？ VBA（Visual Basic for Applications）是微软开发的编程语言，嵌入在Office套件中（如Excel、Word、Outlook），用于自动化重复任务、扩展软件功能。通过编写VBA代码，用户可以实现数据处理、报表生成、界面交互等复杂操作。\n开发环境设置 启用开发者选项卡： Excel/Word：文件 \u0026gt; 选项 \u0026gt; 自定义功能区 \u0026gt; 勾选开发者 打开VBA编辑器： 快捷键：Alt + F11 创建模块： 在VBA编辑器中，插入 \u0026gt; 模块，开始编写代码。 VBA语法基础 变量与数据类型 变量用于存储数据，VBA支持多种数据类型：\n\u0026#39; 声明变量 Dim num As Integer \u0026#39; 整数 Dim name As String \u0026#39; 字符串 Dim price As Double \u0026#39; 双精度浮点数 Dim isReady As Boolean \u0026#39; 布尔值 Dim dateValue As Date \u0026#39; 日期 \u0026#39; 变体类型（万能类型） Dim var As Variant var = \u0026#34;Hello\u0026#34; var = 123 var = #2023-10-01# \u0026#39; 数组声明 Dim arr(1 To 5) As Integer \u0026#39; 固定大小数组 Dim dynamicArr() As String \u0026#39; 动态数组 ReDim dynamicArr(1 To 3) \u0026#39; 调整动态数组大小 运算符与表达式 VBA支持算术、比较、逻辑运算符：\n\u0026#39; 算术运算 result = 10 + 5 * 2 \u0026#39; 结果：20 result = (10 + 5) * 2 \u0026#39; 结果：30 result = 10 / 3 \u0026#39; 结果：3.333... result = 10 \\ 3 \u0026#39; 整除：3 result = 10 Mod 3 \u0026#39; 取余：1 \u0026#39; 比较运算 If 5 \u0026gt; 3 Then MsgBox \u0026#34;True\u0026#34; If \u0026#34;A\u0026#34; = \u0026#34;a\u0026#34; Then MsgBox \u0026#34;Equal\u0026#34; \u0026#39; 区分大小写，输出False \u0026#39; 逻辑运算 If (5 \u0026gt; 3) And (2 \u0026lt; 4) Then MsgBox \u0026#34;Both True\u0026#34; If (5 \u0026gt; 3) Or (2 \u0026gt; 4) Then MsgBox \u0026#34;At least one True\u0026#34; 流程控制 条件判断 \u0026#39; If...Then...Else If score \u0026gt;= 90 Then MsgBox \u0026#34;优秀\u0026#34; ElseIf score \u0026gt;= 80 Then MsgBox \u0026#34;良好\u0026#34; Else MsgBox \u0026#34;不及格\u0026#34; End If \u0026#39; Select Case Select Case dayOfWeek Case 1: MsgBox \u0026#34;星期日\u0026#34; Case 2: MsgBox \u0026#34;星期一\u0026#34; \u0026#39; 其他情况... Case Else: MsgBox \u0026#34;无效\u0026#34; End Select 循环结构 \u0026#39; For...Next循环 For i = 1 To 10 Cells(i, 1).Value = i \u0026#39; 向A列写入1-10 Next i \u0026#39; For Each...Next遍历对象 For Each cell In Range(\u0026#34;A1:A10\u0026#34;) If cell.Value \u0026gt; 5 Then cell.Interior.Color = RGB(255, 0, 0) Next cell \u0026#39; Do...Loop循环 Do While i \u0026lt;= 10 i = i + 1 Loop Excel对象模型操作 单元格与范围操作 \u0026#39; 读取单元格值 value = Range(\u0026#34;A1\u0026#34;).Value value = Cells(1, 1).Value \u0026#39; 行号1，列号1 \u0026#39; 写入单元格值 Range(\u0026#34;B1\u0026#34;).Value = \u0026#34;Hello\u0026#34; Cells(2, 2).Value = 100 \u0026#39; 选择范围 Range(\u0026#34;A1:C10\u0026#34;).Select Range(\u0026#34;A1\u0026#34;).Resize(5, 3).Select \u0026#39; 选择A1到C5 工作表与工作簿 \u0026#39; 添加新工作表 Sheets.Add.Name = \u0026#34;数据汇总\u0026#34; \u0026#39; 删除工作表 Application.DisplayAlerts = False \u0026#39; 关闭提示 Sheets(\u0026#34;Sheet1\u0026#34;).Delete Application.DisplayAlerts = True \u0026#39; 保存工作簿 ActiveWorkbook.Save ActiveWorkbook.SaveAs \u0026#34;C:\\路径\\文件名.xlsx\u0026#34; 实用脚本示例 数据清洗与格式化 删除重复值 Sub RemoveDuplicates() Dim lastRow As Long lastRow = Cells(Rows.Count, 1).End(xlUp).Row \u0026#39; 获取A列最后一行 Range(\u0026#34;A1:A\u0026#34; \u0026amp; lastRow).RemoveDuplicates Columns:=1, Header:=xlYes MsgBox \u0026#34;重复值已删除！\u0026#34; End Sub 4.1.2 批量添加前缀 Sub AddPrefix() Dim cell As Range For Each cell In Range(\u0026#34;A1:A100\u0026#34;) If cell.Value \u0026lt;\u0026gt; \u0026#34;\u0026#34; Then cell.Value = \u0026#34;ID-\u0026#34; \u0026amp; cell.Value End If Next cell End Sub 自动化报表生成 生成数据透视表 Sub CreatePivotTable() Dim wsData As Worksheet Dim wsPivot As Worksheet Dim lastRow As Long Set wsData = ThisWorkbook.Sheets(\u0026#34;数据源\u0026#34;) Set wsPivot = ThisWorkbook.Sheets.Add lastRow = wsData.Cells(wsData.Rows.Count, 1).End(xlUp).Row \u0026#39; 创建数据透视表 wsData.Range(\u0026#34;A1:C\u0026#34; \u0026amp; lastRow).PivotTable _ TableDestination:=wsPivot.Range(\u0026#34;A1\u0026#34;), _ TableName:=\u0026#34;销售数据透视表\u0026#34; \u0026#39; 添加字段 With wsPivot.PivotTables(\u0026#34;销售数据透视表\u0026#34;) .AddDataField .PivotFields(\u0026#34;销售额\u0026#34;), \u0026#34;汇总销售额\u0026#34;, xlSum .PivotFields(\u0026#34;产品名称\u0026#34;).Orientation = xlRowField End With End Sub 邮件自动化 发送带附件的邮件 Sub SendEmailWithAttachment() Dim olApp As Object Dim olMail As Object Set olApp = CreateObject(\u0026#34;Outlook.Application\u0026#34;) Set olMail = olApp.CreateItem(0) \u0026#39; 0代表邮件 With olMail .To = \u0026#34;recipient@example.com\u0026#34; .CC = \u0026#34;cc@example.com\u0026#34; .Subject = \u0026#34;月度报告\u0026#34; .Body = \u0026#34;附件为最新月度报告，请查收。\u0026#34; .Attachments.Add ThisWorkbook.FullName \u0026#39; 添加当前工作簿作为附件 .Send \u0026#39; 发送邮件（或使用.Display显示） End With Set olMail = Nothing Set olApp = Nothing End Sub 高级技巧与最佳实践 错误处理 Sub ErrorHandlingDemo() On Error GoTo ErrorHandler Dim filePath As String filePath = \u0026#34;C:\\不存在的文件.txt\u0026#34; Open filePath For Input As #1 Exit Sub ErrorHandler: MsgBox \u0026#34;错误：\u0026#34; \u0026amp; Err.Number \u0026amp; \u0026#34; - \u0026#34; \u0026amp; Err.Description Resume Next \u0026#39; 继续执行后续代码 End Sub 自定义函数 \u0026#39; 计算BMI指数 Function CalculateBMI(weight As Double, height As Double) As Double CalculateBMI = weight / (height ^ 2) End Function \u0026#39; 在Excel单元格中使用：=CalculateBMI(B1, C1) 事件编程 \u0026#39; 当单元格内容变化时触发 Private Sub Worksheet_Change(ByVal Target As Range) If Not Intersect(Target, Range(\u0026#34;A1\u0026#34;)) Is Nothing Then MsgBox \u0026#34;A1单元格内容已更新！\u0026#34; End If End Sub 图表绘制操作 基本图表创建 Sub CreateBasicChart() Dim ws As Worksheet Dim chartObj As ChartObject Dim dataRange As Range \u0026#39; 设置工作表 Set ws = ThisWorkbook.Sheets(\u0026#34;数据\u0026#34;) \u0026#39; 定义数据范围 Set dataRange = ws.Range(\u0026#34;A1:C10\u0026#34;) \u0026#39; 假设A列为类别，B、C列为数据 \u0026#39; 创建图表 Set chartObj = ws.ChartObjects.Add( _ Left:=100, Top:=50, Width:=500, Height:=300) \u0026#39; 设置图表数据和类型 With chartObj.Chart .SetSourceData Source:=dataRange .ChartType = xlColumnClustered \u0026#39; 柱状图 .HasTitle = True .ChartTitle.Text = \u0026#34;销售数据对比\u0026#34; End With MsgBox \u0026#34;图表创建完成！\u0026#34; End Sub 不同类型图表示例 Sub CreateVariousCharts() Dim ws As Worksheet Dim lastRow As Long Set ws = ThisWorkbook.ActiveSheet \u0026#39; 获取数据最后一行 lastRow = ws.Cells(ws.Rows.Count, \u0026#34;A\u0026#34;).End(xlUp).Row \u0026#39; 创建折线图 ws.ChartObjects.Add(Left:=10, Top:=10, Width:=300, Height:=200).Chart _ .SetSourceData Source:=ws.Range(\u0026#34;A1:B\u0026#34; \u0026amp; lastRow) ws.ChartObjects(1).Chart.ChartType = xlLine \u0026#39; 创建饼图 ws.ChartObjects.Add(Left:=320, Top:=10, Width:=300, Height:=200).Chart _ .SetSourceData Source:=ws.Range(\u0026#34;A1:C\u0026#34; \u0026amp; lastRow) ws.ChartObjects(2).Chart.ChartType = xlPie \u0026#39; 创建散点图 ws.ChartObjects.Add(Left:=10, Top:=220, Width:=300, Height:=200).Chart _ .SetSourceData Source:=ws.Range(\u0026#34;A1:D\u0026#34; \u0026amp; lastRow) ws.ChartObjects(3).Chart.ChartType = xlXYScatter End Sub 图表样式美化 Sub FormatChart() Dim cht As Chart Set cht = ThisWorkbook.Sheets(\u0026#34;数据\u0026#34;).ChartObjects(1).Chart \u0026#39; 设置图表标题 With cht.ChartTitle .Text = \u0026#34;2023年月度销售趋势\u0026#34; .Font.Size = 14 .Font.Bold = True End With \u0026#39; 设置坐标轴 With cht.Axes(xlCategory) \u0026#39; X轴 .HasTitle = True .AxisTitle.Text = \u0026#34;月份\u0026#34; .AxisTitle.Font.Italic = True End With With cht.Axes(xlValue) \u0026#39; Y轴 .HasTitle = True .AxisTitle.Text = \u0026#34;销售额(元)\u0026#34; .MinimumScale = 0 \u0026#39; 设置最小值为0 End With \u0026#39; 设置图例 With cht.Legend .Position = xlBottom \u0026#39; 图例在底部 .Font.Size = 10 End With \u0026#39; 设置数据系列格式 With cht.SeriesCollection(1) .Name = \u0026#34;实际销售额\u0026#34; .Format.Fill.ForeColor.RGB = RGB(50, 120, 200) \u0026#39; 蓝色 .MarkerStyle = xlMarkerStyleCircle \u0026#39; 数据点样式 End With End Sub 自动筛选功能 基本自动筛选 Sub BasicAutoFilter() Dim ws As Worksheet Set ws = ThisWorkbook.Sheets(\u0026#34;客户数据\u0026#34;) \u0026#39; 确保筛选被关闭 If ws.AutoFilterMode Then ws.AutoFilterMode = False \u0026#39; 应用筛选 ws.Range(\u0026#34;A1:D1\u0026#34;).AutoFilter \u0026#39; A1:D1为标题行 \u0026#39; 筛选出\u0026#34;华东地区\u0026#34;的客户 ws.Range(\u0026#34;A1:D1\u0026#34;).AutoFilter Field:=3, Criteria1:=\u0026#34;华东地区\u0026#34; \u0026#39; 第3列是地区 \u0026#39; 筛选出销售额大于10000的记录 \u0026#39; ws.Range(\u0026#34;A1:D1\u0026#34;).AutoFilter Field:=4, Criteria1:=\u0026#34;\u0026gt;10000\u0026#34; End Sub 多条件筛选 Sub AdvancedFilter() Dim ws As Worksheet Set ws = ThisWorkbook.Sheets(\u0026#34;销售数据\u0026#34;) \u0026#39; 关闭现有筛选 If ws.AutoFilterMode Then ws.AutoFilterMode = False \u0026#39; 多条件筛选：地区为\u0026#34;华南\u0026#34;且销售额\u0026gt;5000 With ws.Range(\u0026#34;A1:D1000\u0026#34;) .AutoFilter .AutoFilter Field:=3, Criteria1:=\u0026#34;华南\u0026#34; \u0026#39; 第3列：地区 .AutoFilter Field:=4, Criteria1:=\u0026#34;\u0026gt;5000\u0026#34; \u0026#39; 第4列：销售额 End With \u0026#39; 统计筛选结果数量 Dim visibleCount As Long visibleCount = ws.Range(\u0026#34;A2:A1000\u0026#34;).SpecialCells(xlCellTypeVisible).Count MsgBox \u0026#34;符合条件的记录有 \u0026#34; \u0026amp; visibleCount \u0026amp; \u0026#34; 条\u0026#34; End Sub 高级筛选（使用条件区域） Sub AdvancedFilterWithCriteria() Dim wsData As Worksheet Dim wsCriteria As Worksheet Dim wsResult As Worksheet \u0026#39; 设置工作表 Set wsData = ThisWorkbook.Sheets(\u0026#34;数据\u0026#34;) Set wsCriteria = ThisWorkbook.Sheets(\u0026#34;条件\u0026#34;) Set wsResult = ThisWorkbook.Sheets(\u0026#34;结果\u0026#34;) \u0026#39; 清除之前的结果 wsResult.Range(\u0026#34;A2:D1000\u0026#34;).ClearContents \u0026#39; 应用高级筛选 wsData.Range(\u0026#34;A1:D1000\u0026#34;).AdvancedFilter _ Action:=xlFilterCopy, _ CriteriaRange:=wsCriteria.Range(\u0026#34;A1:D2\u0026#34;), _ CopyToRange:=wsResult.Range(\u0026#34;A1:D1\u0026#34;), _ Unique:=False MsgBox \u0026#34;高级筛选完成，结果已复制到结果表\u0026#34; End Sub 取消筛选与恢复数据 Sub RemoveFilter() Dim ws As Worksheet Set ws = ThisWorkbook.ActiveSheet \u0026#39; 检查是否有筛选 If ws.AutoFilterMode Then \u0026#39; 关闭筛选 ws.AutoFilterMode = False MsgBox \u0026#34;筛选已取消\u0026#34; Else MsgBox \u0026#34;当前没有应用筛选\u0026#34; End If \u0026#39; 选中数据区域第一行 ws.Range(\u0026#34;A1\u0026#34;).Select End Sub With语句的使用 With语句是VBA中提高代码效率和可读性的重要工具，特别适合对同一对象进行多项操作。\nWith语句基础用法 Sub WithStatementBasic() \u0026#39; 不使用With语句 Range(\u0026#34;A1\u0026#34;).Value = \u0026#34;姓名\u0026#34; Range(\u0026#34;A1\u0026#34;).Font.Bold = True Range(\u0026#34;A1\u0026#34;).Font.Size = 12 Range(\u0026#34;A1\u0026#34;).Interior.Color = RGB(200, 200, 200) Range(\u0026#34;A1\u0026#34;).HorizontalAlignment = xlCenter \u0026#39; 使用With语句，更简洁高效 With Range(\u0026#34;B1\u0026#34;) .Value = \u0026#34;年龄\u0026#34; .Font.Bold = True .Font.Size = 12 .Interior.Color = RGB(200, 200, 200) .HorizontalAlignment = xlCenter End With End Sub With语句在对象操作中的应用 Sub WithStatementForObjects() Dim ws As Worksheet Set ws = ThisWorkbook.Sheets.Add ws.Name = \u0026#34;With示例\u0026#34; \u0026#39; 使用With配置工作表 With ws \u0026#39; 设置标题 With .Range(\u0026#34;A1:C1\u0026#34;) .Value = Array(\u0026#34;ID\u0026#34;, \u0026#34;名称\u0026#34;, \u0026#34;数量\u0026#34;) .Font.Bold = True .Interior.Color = RGB(180, 200, 255) .EntireColumn.AutoFit End With \u0026#39; 填充示例数据 .Range(\u0026#34;A2\u0026#34;).Value = 1 .Range(\u0026#34;B2\u0026#34;).Value = \u0026#34;产品A\u0026#34; .Range(\u0026#34;C2\u0026#34;).Value = 100 .Range(\u0026#34;A3\u0026#34;).Value = 2 .Range(\u0026#34;B3\u0026#34;).Value = \u0026#34;产品B\u0026#34; .Range(\u0026#34;C3\u0026#34;).Value = 200 \u0026#39; 添加边框 .Range(\u0026#34;A1:C3\u0026#34;).Borders.LineStyle = xlContinuous End With MsgBox \u0026#34;工作表创建完成\u0026#34; End Sub 嵌套With语句 Sub NestedWithStatements() Dim ws As Worksheet Set ws = ThisWorkbook.ActiveSheet \u0026#39; 嵌套With语句示例 With ws.ChartObjects.Add(Left:=100, Top:=50, Width:=500, Height:=300).Chart .ChartType = xlColumnClustered .SetSourceData Source:=ws.Range(\u0026#34;A1:C6\u0026#34;) \u0026#39; 嵌套With设置标题 With .ChartTitle .Text = \u0026#34;季度销售报表\u0026#34; .Font.Size = 16 .Font.Bold = True End With \u0026#39; 嵌套With设置X轴 With .Axes(xlCategory) .HasTitle = True .AxisTitle.Text = \u0026#34;季度\u0026#34; End With \u0026#39; 嵌套With设置Y轴 With .Axes(xlValue) .HasTitle = True .AxisTitle.Text = \u0026#34;销售额\u0026#34; .MinimumScale = 0 End With End With End Sub With语句的优势总结 减少代码量，使代码更简洁 提高执行效率，对象只需引用一次 增强代码可读性，明确操作对象 减少输入错误，特别是长对象名称 UserForm（用户窗体） UserForm是VBA中创建自定义界面的强大工具，可用于数据录入、参数设置等交互操作。\n创建UserForm的步骤 打开VBA编辑器（Alt+F11） 插入UserForm：插入 \u0026gt; 用户窗体 在工具箱中选择控件添加到窗体 设置控件属性 编写事件代码 基本UserForm示例：数据录入表单 \u0026#39; 以下代码需要在UserForm的代码窗口中编写 \u0026#39; UserForm初始化事件 Private Sub UserForm_Initialize() \u0026#39; 初始化下拉列表 Me.cboDepartment.List = Array(\u0026#34;销售部\u0026#34;, \u0026#34;市场部\u0026#34;, \u0026#34;技术部\u0026#34;, \u0026#34;行政部\u0026#34;) \u0026#39; 设置默认日期为今天 Me.txtDate.Value = Date \u0026#39; 设置标题 Me.Caption = \u0026#34;员工信息录入\u0026#34; End Sub \u0026#39; 确定按钮点击事件 Private Sub cmdOK_Click() Dim ws As Worksheet Dim lastRow As Long \u0026#39; 数据验证 If Me.txtName.Value = \u0026#34;\u0026#34; Then MsgBox \u0026#34;请输入姓名\u0026#34;, vbExclamation Me.txtName.SetFocus Exit Sub End If If Me.cboDepartment.Value = \u0026#34;\u0026#34; Then MsgBox \u0026#34;请选择部门\u0026#34;, vbExclamation Me.cboDepartment.SetFocus Exit Sub End If \u0026#39; 写入数据 Set ws = ThisWorkbook.Sheets(\u0026#34;员工信息\u0026#34;) lastRow = ws.Cells(ws.Rows.Count, \u0026#34;A\u0026#34;).End(xlUp).Row + 1 ws.Cells(lastRow, \u0026#34;A\u0026#34;).Value = Me.txtID.Value ws.Cells(lastRow, \u0026#34;B\u0026#34;).Value = Me.txtName.Value ws.Cells(lastRow, \u0026#34;C\u0026#34;).Value = Me.cboDepartment.Value ws.Cells(lastRow, \u0026#34;D\u0026#34;).Value = Me.txtDate.Value ws.Cells(lastRow, \u0026#34;E\u0026#34;).Value = Me.txtSalary.Value \u0026#39; 提示成功 MsgBox \u0026#34;数据已成功保存！\u0026#34;, vbInformation \u0026#39; 清空表单 Me.txtID.Value = \u0026#34;\u0026#34; Me.txtName.Value = \u0026#34;\u0026#34; Me.txtSalary.Value = \u0026#34;\u0026#34; Me.txtID.SetFocus End Sub \u0026#39; 取消按钮点击事件 Private Sub cmdCancel_Click() \u0026#39; 关闭表单 Unload Me End Sub 显示UserForm的代码 \u0026#39; 标准模块中的代码，用于显示用户窗体 Sub ShowEmployeeForm() \u0026#39; 显示用户窗体 EmployeeForm.Show \u0026#39; EmployeeForm是你的UserForm名称 End Sub 常用控件及属性 Sub ControlPropertiesDemo() \u0026#39; 以下是常用控件及其重要属性的说明 \u0026#39; TextBox（文本框） \u0026#39; .Value: 文本框中的内容 \u0026#39; .Text: 当前显示的文本 \u0026#39; .Enabled: 是否可用 \u0026#39; .Visible: 是否可见 \u0026#39; 示例: \u0026#39; Me.txtName.Value = \u0026#34;张三\u0026#34; \u0026#39; ComboBox（组合框） \u0026#39; .List: 下拉列表内容 \u0026#39; .Value: 当前选中的值 \u0026#39; .Style: 样式（0=下拉组合框，2=下拉列表） \u0026#39; 示例: \u0026#39; Me.cboStatus.List = Array(\u0026#34;在职\u0026#34;, \u0026#34;离职\u0026#34;, \u0026#34;休假\u0026#34;) \u0026#39; CheckBox（复选框） \u0026#39; .Value: 选中状态（True/False） \u0026#39; .Caption: 显示文本 \u0026#39; 示例: \u0026#39; If Me.chkAgree.Value = True Then ... \u0026#39; OptionButton（选项按钮） \u0026#39; .Value: 是否选中（True/False） \u0026#39; .GroupName: 分组名称（同组中只能选一个） \u0026#39; 示例: \u0026#39; If Me.optMale.Value = True Then ... \u0026#39; CommandButton（命令按钮） \u0026#39; .Caption: 按钮文本 \u0026#39; .OnClick: 点击事件 \u0026#39; 示例: \u0026#39; Me.cmdSubmit.Caption = \u0026#34;提交\u0026#34; \u0026#39; Label（标签） \u0026#39; .Caption: 显示文本 \u0026#39; .Font: 字体设置 \u0026#39; 示例: \u0026#39; Me.lblTitle.Caption = \u0026#34;用户信息\u0026#34; End Sub 完整UserForm示例：查询工具 \u0026#39; UserForm代码 Private Sub cmdSearch_Click() Dim ws As Worksheet Dim lastRow As Long Dim i As Long Dim searchTerm As String Set ws = ThisWorkbook.Sheets(\u0026#34;产品数据\u0026#34;) lastRow = ws.Cells(ws.Rows.Count, \u0026#34;A\u0026#34;).End(xlUp).Row searchTerm = Me.txtSearch.Value \u0026#39; 清除之前的结果 Me.lstResults.Clear \u0026#39; 搜索数据 For i = 2 To lastRow \u0026#39; 检查是否匹配（名称或编号） If InStr(1, ws.Cells(i, 1).Value, searchTerm, vbTextCompare) \u0026gt; 0 Or _ InStr(1, ws.Cells(i, 2).Value, searchTerm, vbTextCompare) \u0026gt; 0 Then \u0026#39; 添加到列表框 Me.lstResults.AddItem Me.lstResults.List(Me.lstResults.ListCount - 1, 0) = ws.Cells(i, 1).Value \u0026#39; 产品编号 Me.lstResults.List(Me.lstResults.ListCount - 1, 1) = ws.Cells(i, 2).Value \u0026#39; 产品名称 Me.lstResults.List(Me.lstResults.ListCount - 1, 2) = ws.Cells(i, 3).Value \u0026#39; 价格 End If Next i \u0026#39; 显示结果数量 Me.lblCount.Caption = \u0026#34;找到 \u0026#34; \u0026amp; Me.lstResults.ListCount \u0026amp; \u0026#34; 个结果\u0026#34; End Sub Private Sub lstResults_Click() \u0026#39; 双击列表项时显示详细信息 If Me.lstResults.ListIndex \u0026gt;= 0 Then MsgBox \u0026#34;产品编号: \u0026#34; \u0026amp; Me.lstResults.List(Me.lstResults.ListIndex, 0) \u0026amp; vbCrLf \u0026amp; _ \u0026#34;产品名称: \u0026#34; \u0026amp; Me.lstResults.List(Me.lstResults.ListIndex, 1) \u0026amp; vbCrLf \u0026amp; _ \u0026#34;价格: \u0026#34; \u0026amp; Me.lstResults.List(Me.lstResults.ListIndex, 2), _ vbInformation, \u0026#34;产品详情\u0026#34; End If End Sub Private Sub cmdClose_Click() Unload Me End Sub 综合案例：销售数据处理系统 \u0026#39; 模块1：主程序 Sub SalesDataSystem() \u0026#39; 显示系统菜单 Dim choice As Integer choice = MsgBox(\u0026#34;1. 数据录入\u0026#34; \u0026amp; vbCrLf \u0026amp; _ \u0026#34;2. 数据筛选\u0026#34; \u0026amp; vbCrLf \u0026amp; _ \u0026#34;3. 生成报表\u0026#34; \u0026amp; vbCrLf \u0026amp; _ \u0026#34;4. 图表分析\u0026#34; \u0026amp; vbCrLf \u0026amp; _ \u0026#34;5. 退出\u0026#34;, _ vbYesNoCancel + vbQuestion, \u0026#34;销售数据处理系统\u0026#34;) Select Case choice Case vbYes: DataEntryForm.Show \u0026#39; 数据录入 Case vbNo: RunFilter \u0026#39; 数据筛选 Case vbCancel: GenerateReport \u0026#39; 生成报表 \u0026#39; 其他选项可以在这里添加 End Select End Sub \u0026#39; 模块2：数据处理 Sub RunFilter() Dim ws As Worksheet Dim filterMonth As String Set ws = ThisWorkbook.Sheets(\u0026#34;销售记录\u0026#34;) \u0026#39; 关闭现有筛选 If ws.AutoFilterMode Then ws.AutoFilterMode = False \u0026#39; 获取筛选条件 filterMonth = InputBox(\u0026#34;请输入要筛选的月份(1-12):\u0026#34;, \u0026#34;筛选条件\u0026#34;) If filterMonth = \u0026#34;\u0026#34; Then Exit Sub \u0026#39; 应用筛选 With ws.Range(\u0026#34;A1:E1\u0026#34;) .AutoFilter .AutoFilter Field:=2, Criteria1:=\u0026#34;*\u0026#34; \u0026amp; filterMonth \u0026amp; \u0026#34;月*\u0026#34; \u0026#39; 第2列是日期 \u0026#39; 检查是否有符合条件的数据 On Error Resume Next Dim filteredCount As Long filteredCount = ws.Range(\u0026#34;A2:A1000\u0026#34;).SpecialCells(xlCellTypeVisible).Count On Error GoTo 0 If filteredCount = 0 Then MsgBox \u0026#34;没有找到符合条件的数据\u0026#34;, vbInformation ws.AutoFilterMode = False Else MsgBox \u0026#34;已筛选出 \u0026#34; \u0026amp; filteredCount \u0026amp; \u0026#34; 条记录\u0026#34;, vbInformation End If End With End Sub \u0026#39; 模块3：报表生成 Sub GenerateReport() Dim wsData As Worksheet Dim wsReport As Worksheet Dim lastRow As Long Set wsData = ThisWorkbook.Sheets(\u0026#34;销售记录\u0026#34;) Set wsReport = ThisWorkbook.Sheets.Add wsReport.Name = \u0026#34;销售报表_\u0026#34; \u0026amp; Format(Date, \u0026#34;yyyymmdd\u0026#34;) \u0026#39; 复制标题 wsData.Range(\u0026#34;A1:E1\u0026#34;).Copy wsReport.Range(\u0026#34;A1\u0026#34;) \u0026#39; 复制筛选后的数据 wsData.Range(\u0026#34;A1:E1000\u0026#34;).SpecialCells(xlCellTypeVisible).Copy _ wsReport.Range(\u0026#34;A1\u0026#34;) \u0026#39; 格式化报表 With wsReport \u0026#39; 调整列宽 .Columns(\u0026#34;A:E\u0026#34;).AutoFit \u0026#39; 设置标题格式 With .Range(\u0026#34;A1:E1\u0026#34;) .Font.Bold = True .Interior.Color = RGB(200, 220, 255) End With \u0026#39; 添加总计行 lastRow = .Cells(.Rows.Count, \u0026#34;A\u0026#34;).End(xlUp).Row + 1 .Cells(lastRow, \u0026#34;A\u0026#34;).Value = \u0026#34;总计\u0026#34; .Cells(lastRow, \u0026#34;E\u0026#34;).Formula = \u0026#34;=SUM(E2:E\u0026#34; \u0026amp; lastRow - 1 \u0026amp; \u0026#34;)\u0026#34; .Cells(lastRow, \u0026#34;E\u0026#34;).Font.Bold = True \u0026#39; 创建图表 With .ChartObjects.Add(Left:=300, Top:=50, Width:=400, Height:=250).Chart .ChartType = xlColumnClustered .SetSourceData Source:=.Parent.Parent.Range(\u0026#34;B2:E\u0026#34; \u0026amp; lastRow - 1) .HasTitle = True .ChartTitle.Text = \u0026#34;销售数据汇总\u0026#34; End With End With MsgBox \u0026#34;报表已生成：\u0026#34; \u0026amp; wsReport.Name, vbInformation End Sub 文件操作 文件操作是能够实现文本文件的读取、写入和修改。\n文件操作基础概念 VBA中文件操作的核心函数和语句：\nOpen：打开文件 Close：关闭文件 Input/Line Input：读取文件内容 Print/Write：写入文件内容 FreeFile：获取可用的文件号 EOF：判断是否到达文件末尾 文件打开模式：\nFor Input：只读模式，用于读取文件 For Output：只写模式，用于创建新文件或覆盖已有文件 For Append：追加模式，在已有文件末尾添加内容 For Binary：二进制模式，用于读写二进制文件 读取文本文件 Sub ReadTextFile() Dim filePath As String Dim fileNumber As Integer Dim lineContent As String Dim rowNum As Integer \u0026#39; 获取文件路径 filePath = \u0026#34;C:\\data\\example.txt\u0026#34; \u0026#39; 检查文件是否存在 If Dir(filePath) = \u0026#34;\u0026#34; Then MsgBox \u0026#34;文件不存在: \u0026#34; \u0026amp; filePath, vbExclamation Exit Sub End If \u0026#39; 获取可用文件号 fileNumber = FreeFile \u0026#39; 打开文件用于读取 Open filePath For Input As #fileNumber \u0026#39; 初始化行号 rowNum = 1 \u0026#39; 读取文件内容并输出到工作表 Worksheets(\u0026#34;数据\u0026#34;).Range(\u0026#34;A:A\u0026#34;).ClearContents \u0026#39; 清空A列 Do While Not EOF(fileNumber) \u0026#39; 读取一行内容 Line Input #fileNumber, lineContent \u0026#39; 写入到工作表 Worksheets(\u0026#34;数据\u0026#34;).Cells(rowNum, 1).Value = lineContent rowNum = rowNum + 1 Loop \u0026#39; 关闭文件 Close #fileNumber MsgBox \u0026#34;文件读取完成，共 \u0026#34; \u0026amp; rowNum - 1 \u0026amp; \u0026#34; 行\u0026#34;, vbInformation End Sub 写入文本文件 Sub WriteToTextFile() Dim filePath As String Dim fileNumber As Integer Dim i As Integer \u0026#39; 设置文件路径 filePath = \u0026#34;C:\\data\\output.txt\u0026#34; \u0026#39; 获取可用文件号 fileNumber = FreeFile \u0026#39; 打开文件用于写入（会覆盖已有文件） Open filePath For Output As #fileNumber \u0026#39; 写入内容 Print #fileNumber, \u0026#34;这是一个示例文件\u0026#34; Print #fileNumber, \u0026#34;生成时间: \u0026#34; \u0026amp; Now() Print #fileNumber, \u0026#34;-------------------------\u0026#34; \u0026#39; 写入一些数据 For i = 1 To 5 Print #fileNumber, \u0026#34;数据行 \u0026#34; \u0026amp; i \u0026amp; \u0026#34;: \u0026#34; \u0026amp; i * 100 Next i \u0026#39; 关闭文件 Close #fileNumber MsgBox \u0026#34;文件写入完成: \u0026#34; \u0026amp; filePath, vbInformation End Sub 追加内容到文件 Sub AppendToFile() Dim filePath As String Dim fileNumber As Integer Dim newData As String \u0026#39; 设置文件路径 filePath = \u0026#34;C:\\data\\log.txt\u0026#34; \u0026#39; 获取要追加的数据 newData = InputBox(\u0026#34;请输入要追加的日志内容:\u0026#34;, \u0026#34;追加日志\u0026#34;) If newData = \u0026#34;\u0026#34; Then Exit Sub \u0026#39; 用户取消 \u0026#39; 获取可用文件号 fileNumber = FreeFile \u0026#39; 打开文件用于追加 Open filePath For Append As #fileNumber \u0026#39; 写入带时间戳的内容 Print #fileNumber, \u0026#34;[\u0026#34; \u0026amp; Format(Now(), \u0026#34;yyyy-mm-dd hh:nn:ss\u0026#34;) \u0026amp; \u0026#34;] \u0026#34; \u0026amp; newData \u0026#39; 关闭文件 Close #fileNumber MsgBox \u0026#34;内容已追加到文件\u0026#34;, vbInformation End Sub 读取整个文件内容 Sub ReadEntireFile() Dim filePath As String Dim fileNumber As Integer Dim fileContent As String \u0026#39; 设置文件路径 filePath = \u0026#34;C:\\data\\notes.txt\u0026#34; \u0026#39; 检查文件是否存在 If Dir(filePath) = \u0026#34;\u0026#34; Then MsgBox \u0026#34;文件不存在\u0026#34;, vbExclamation Exit Sub End If \u0026#39; 获取可用文件号 fileNumber = FreeFile \u0026#39; 打开文件 Open filePath For Input As #fileNumber \u0026#39; 读取整个文件内容 fileContent = Input(LOF(fileNumber), fileNumber) \u0026#39; 关闭文件 Close #fileNumber \u0026#39; 显示文件内容（长内容会自动截断） MsgBox \u0026#34;文件内容: \u0026#34; \u0026amp; vbCrLf \u0026amp; fileContent, vbInformation, \u0026#34;文件内容\u0026#34; \u0026#39; 也可以将内容写入单元格 Worksheets(\u0026#34;数据\u0026#34;).Range(\u0026#34;A1\u0026#34;).Value = fileContent End Sub 批量处理多个文件 Sub ProcessMultipleFiles() Dim folderPath As String Dim fileName As String Dim fileNumber As Integer Dim content As String Dim resultRow As Integer \u0026#39; 设置文件夹路径 folderPath = \u0026#34;C:\\data\\reports\\\u0026#34; resultRow = 1 \u0026#39; 清空结果区域 Worksheets(\u0026#34;汇总\u0026#34;).Range(\u0026#34;A:B\u0026#34;).ClearContents Worksheets(\u0026#34;汇总\u0026#34;).Cells(1, 1).Value = \u0026#34;文件名\u0026#34; Worksheets(\u0026#34;汇总\u0026#34;).Cells(1, 2).Value = \u0026#34;第一行内容\u0026#34; Worksheets(\u0026#34;汇总\u0026#34;).Rows(1).Font.Bold = True \u0026#39; 获取第一个文本文件 fileName = Dir(folderPath \u0026amp; \u0026#34;*.txt\u0026#34;) \u0026#39; 循环处理所有文本文件 Do While fileName \u0026lt;\u0026gt; \u0026#34;\u0026#34; resultRow = resultRow + 1 Worksheets(\u0026#34;汇总\u0026#34;).Cells(resultRow, 1).Value = fileName \u0026#39; 读取文件第一行 fileNumber = FreeFile Open folderPath \u0026amp; fileName For Input As #fileNumber Line Input #fileNumber, content Close #fileNumber \u0026#39; 写入结果 Worksheets(\u0026#34;汇总\u0026#34;).Cells(resultRow, 2).Value = content \u0026#39; 获取下一个文件 fileName = Dir() Loop \u0026#39; 调整列宽 Worksheets(\u0026#34;汇总\u0026#34;).Columns(\u0026#34;A:B\u0026#34;).AutoFit MsgBox \u0026#34;处理完成，共 \u0026#34; \u0026amp; resultRow - 1 \u0026amp; \u0026#34; 个文件\u0026#34;, vbInformation End Sub 文件操作的错误处理 Sub FileOperationWithErrorHandling() Dim filePath As String Dim fileNumber As Integer filePath = \u0026#34;C:\\data\\sensitive.txt\u0026#34; On Error GoTo ErrorHandler fileNumber = FreeFile Open filePath For Input As #fileNumber \u0026#39; 这里添加文件处理代码 MsgBox \u0026#34;文件打开成功，可以进行读写操作\u0026#34;, vbInformation Close #fileNumber Exit Sub ErrorHandler: \u0026#39; 处理不同类型的错误 Select Case Err.Number Case 53 \u0026#39; 文件未找到 MsgBox \u0026#34;错误: 找不到文件 \u0026#34; \u0026amp; filePath, vbCritical Case 70 \u0026#39; 权限被拒绝 MsgBox \u0026#34;错误: 没有权限访问文件 \u0026#34; \u0026amp; filePath, vbCritical Case Else MsgBox \u0026#34;发生错误 \u0026#34; \u0026amp; Err.Number \u0026amp; \u0026#34;: \u0026#34; \u0026amp; Err.Description, vbCritical End Select \u0026#39; 确保文件被关闭 On Error Resume Next Close #fileNumber End Sub FileDialog基础 FileDialog是Office应用程序提供的文件对话框对象，支持多种操作类型，包括打开文件、保存文件和选择文件夹。在Excel VBA中，我们通过Application.FileDialog来使用这一功能。\nFileDialog的四种类型 VBA提供四种文件对话框类型：\nmsoFileDialogOpen：打开文件对话框（可选择一个或多个文件） msoFileDialogSaveAs：保存文件对话框 msoFileDialogFilePicker：文件选择对话框（类似打开，但更通用） msoFileDialogFolderPicker：文件夹选择对话框 基本使用方法 Sub BasicFileDialog() Dim fd As FileDialog Dim selectedFile As String \u0026#39; 创建文件对话框实例（打开文件类型） Set fd = Application.FileDialog(msoFileDialogOpen) \u0026#39; 设置对话框标题 fd.Title = \u0026#34;请选择要打开的文本文件\u0026#34; \u0026#39; 设置允许选择的文件类型 fd.Filters.Clear \u0026#39; 清除默认筛选器 fd.Filters.Add \u0026#34;文本文件\u0026#34;, \u0026#34;*.txt\u0026#34; \u0026#39; 添加文本文件筛选 fd.Filters.Add \u0026#34;Excel文件\u0026#34;, \u0026#34;*.xlsx;*.xls\u0026#34; \u0026#39; 添加Excel文件筛选 fd.Filters.Add \u0026#34;所有文件\u0026#34;, \u0026#34;*.*\u0026#34; \u0026#39; 添加所有文件筛选 \u0026#39; 允许选择多个文件（默认是False） fd.AllowMultiSelect = False \u0026#39; 显示对话框，如果用户点击了\u0026#34;确定\u0026#34;按钮 If fd.Show = -1 Then \u0026#39; 获取选中的文件路径 selectedFile = fd.SelectedItems(1) \u0026#39; 显示选中的文件 MsgBox \u0026#34;您选择的文件是: \u0026#34; \u0026amp; vbCrLf \u0026amp; selectedFile, vbInformation Else \u0026#39; 用户取消了操作 MsgBox \u0026#34;您取消了文件选择\u0026#34;, vbInformation End If \u0026#39; 释放对象 Set fd = Nothing End Sub 单文件选择对话框（打开文件） Sub SelectSingleFile() Dim fd As FileDialog Dim filePath As String Dim ws As Worksheet \u0026#39; 创建文件选择对话框 Set fd = Application.FileDialog(msoFileDialogFilePicker) With fd .Title = \u0026#34;选择要导入的数据文件\u0026#34; .Filters.Clear .Filters.Add \u0026#34;CSV文件\u0026#34;, \u0026#34;*.csv\u0026#34; .Filters.Add \u0026#34;文本文件\u0026#34;, \u0026#34;*.txt\u0026#34; .AllowMultiSelect = False \u0026#39; 只允许选择一个文件 \u0026#39; 显示对话框 If .Show = -1 Then filePath = .SelectedItems(1) \u0026#39; 这里可以添加处理文件的代码 Set ws = ThisWorkbook.Sheets.Add ws.Name = \u0026#34;导入数据\u0026#34; MsgBox \u0026#34;已选择文件: \u0026#34; \u0026amp; filePath \u0026amp; vbCrLf \u0026amp; _ \u0026#34;数据将导入到 \u0026#34;\u0026#34;\u0026#34; \u0026amp; ws.Name \u0026amp; \u0026#34;\u0026#34;\u0026#34; 工作表\u0026#34;, vbInformation \u0026#39; 调用文件读取函数（使用之前学过的文件读取方法） ReadDataToWorksheet filePath, ws End If End With Set fd = Nothing End Sub \u0026#39; 辅助函数：将文件内容读取到工作表 Sub ReadDataToWorksheet(filePath As String, ws As Worksheet) Dim fileNum As Integer Dim lineContent As String Dim rowNum As Long rowNum = 1 fileNum = FreeFile Open filePath For Input As #fileNum Do While Not EOF(fileNum) Line Input #fileNum, lineContent ws.Cells(rowNum, 1).Value = lineContent rowNum = rowNum + 1 Loop Close #fileNum ws.Columns(\u0026#34;A:A\u0026#34;).AutoFit MsgBox \u0026#34;数据导入完成，共 \u0026#34; \u0026amp; rowNum - 1 \u0026amp; \u0026#34; 行\u0026#34;, vbInformation End Sub 多文件选择对话框 Sub SelectMultipleFiles() Dim fd As FileDialog Dim i As Integer Dim ws As Worksheet \u0026#39; 创建文件选择对话框 Set fd = Application.FileDialog(msoFileDialogFilePicker) With fd .Title = \u0026#34;选择多个要处理的文件\u0026#34; .Filters.Clear .Filters.Add \u0026#34;文本文件\u0026#34;, \u0026#34;*.txt\u0026#34; .AllowMultiSelect = True \u0026#39; 允许选择多个文件 \u0026#39; 显示对话框 If .Show = -1 Then \u0026#39; 创建结果工作表 Set ws = ThisWorkbook.Sheets.Add ws.Name = \u0026#34;多文件处理结果\u0026#34; ws.Cells(1, 1).Value = \u0026#34;文件名\u0026#34; ws.Cells(1, 2).Value = \u0026#34;路径\u0026#34; ws.Cells(1, 3).Value = \u0026#34;行数\u0026#34; ws.Rows(1).Font.Bold = True \u0026#39; 处理每个选中的文件 For i = 1 To .SelectedItems.Count ProcessFile .SelectedItems(i), ws, i + 1 Next i ws.Columns(\u0026#34;A:C\u0026#34;).AutoFit MsgBox \u0026#34;已处理 \u0026#34; \u0026amp; .SelectedItems.Count \u0026amp; \u0026#34; 个文件\u0026#34;, vbInformation End If End With Set fd = Nothing End Sub \u0026#39; 辅助函数：处理单个文件并记录信息 Sub ProcessFile(filePath As String, ws As Worksheet, rowNum As Long) Dim fileNum As Integer Dim lineCount As Long Dim dummy As String \u0026#39; 获取文件名（不包含路径） Dim fileName As String fileName = Mid(filePath, InStrRev(filePath, \u0026#34;\\\u0026#34;) + 1) \u0026#39; 计算文件行数 lineCount = 0 fileNum = FreeFile Open filePath For Input As #fileNum Do While Not EOF(fileNum) Line Input #fileNum, dummy lineCount = lineCount + 1 Loop Close #fileNum \u0026#39; 记录信息到工作表 ws.Cells(rowNum, 1).Value = fileName ws.Cells(rowNum, 2).Value = filePath ws.Cells(rowNum, 3).Value = lineCount End Sub 保存文件对话框 Sub SaveFileDialogDemo() Dim fd As FileDialog Dim savePath As String Dim fileNum As Integer Dim i As Integer \u0026#39; 创建保存文件对话框 Set fd = Application.FileDialog(msoFileDialogSaveAs) With fd .Title = \u0026#34;保存导出数据\u0026#34; .InitialFileName = \u0026#34;导出数据_\u0026#34; \u0026amp; Format(Date, \u0026#34;yyyymmdd\u0026#34;) \u0026amp; \u0026#34;.txt\u0026#34; \u0026#39; 默认文件名 .InitialView = msoFileDialogViewDetails \u0026#39; 详细视图 \u0026#39; 显示对话框 If .Show = -1 Then savePath = .SelectedItems(1) \u0026#39; 检查文件是否已存在 If Dir(savePath) \u0026lt;\u0026gt; \u0026#34;\u0026#34; Then If MsgBox(\u0026#34;文件已存在，是否覆盖?\u0026#34;, vbYesNo + vbQuestion) = vbNo Then MsgBox \u0026#34;保存操作已取消\u0026#34;, vbInformation Exit Sub End If End If \u0026#39; 写入示例数据 fileNum = FreeFile Open savePath For Output As #fileNum Print #fileNum, \u0026#34;数据导出时间: \u0026#34; \u0026amp; Now() Print #fileNum, \u0026#34;====================\u0026#34; For i = 1 To 10 Print #fileNum, \u0026#34;示例数据行 \u0026#34; \u0026amp; i \u0026amp; \u0026#34;: \u0026#34; \u0026amp; i * Rnd() * 1000 Next i Close #fileNum MsgBox \u0026#34;数据已成功保存到: \u0026#34; \u0026amp; vbCrLf \u0026amp; savePath, vbInformation End If End With Set fd = Nothing End Sub 文件夹选择对话框 Sub SelectFolderDialog() Dim fd As FileDialog Dim folderPath As String Dim fileName As String Dim ws As Worksheet Dim rowNum As Long \u0026#39; 创建文件夹选择对话框 Set fd = Application.FileDialog(msoFileDialogFolderPicker) With fd .Title = \u0026#34;选择要扫描的文件夹\u0026#34; .InitialFileName = ThisWorkbook.Path \u0026#39; 初始路径为当前工作簿所在文件夹 \u0026#39; 显示对话框 If .Show = -1 Then folderPath = .SelectedItems(1) \u0026#39; 创建结果工作表 Set ws = ThisWorkbook.Sheets.Add ws.Name = \u0026#34;文件夹扫描结果\u0026#34; ws.Cells(1, 1).Value = \u0026#34;文件名\u0026#34; ws.Cells(1, 2).Value = \u0026#34;路径\u0026#34; ws.Cells(1, 3).Value = \u0026#34;大小(字节)\u0026#34; ws.Cells(1, 4).Value = \u0026#34;修改日期\u0026#34; ws.Rows(1).Font.Bold = True rowNum = 2 \u0026#39; 获取文件夹中的所有文件 fileName = Dir(folderPath \u0026amp; \u0026#34;\\*.*\u0026#34;) \u0026#39; 循环处理所有文件 Do While fileName \u0026lt;\u0026gt; \u0026#34;\u0026#34; ws.Cells(rowNum, 1).Value = fileName ws.Cells(rowNum, 2).Value = folderPath \u0026amp; \u0026#34;\\\u0026#34; \u0026amp; fileName ws.Cells(rowNum, 3).Value = FileLen(folderPath \u0026amp; \u0026#34;\\\u0026#34; \u0026amp; fileName) ws.Cells(rowNum, 4).Value = FileDateTime(folderPath \u0026amp; \u0026#34;\\\u0026#34; \u0026amp; fileName) rowNum = rowNum + 1 \u0026#39; 获取下一个文件 fileName = Dir() Loop ws.Columns(\u0026#34;A:D\u0026#34;).AutoFit MsgBox \u0026#34;文件夹扫描完成，共发现 \u0026#34; \u0026amp; rowNum - 2 \u0026amp; \u0026#34; 个文件\u0026#34;, vbInformation End If End With Set fd = Nothing End Sub 带预览功能的文件选择器 Sub FileDialogWithPreview() Dim fd As FileDialog Dim selectedFile As String Dim wsPreview As Worksheet \u0026#39; 创建文件对话框 Set fd = Application.FileDialog(msoFileDialogOpen) With fd .Title = \u0026#34;选择文本文件（带预览）\u0026#34; .Filters.Clear .Filters.Add \u0026#34;文本文件\u0026#34;, \u0026#34;*.txt\u0026#34; .AllowMultiSelect = False \u0026#39; 创建预览工作表 On Error Resume Next Set wsPreview = ThisWorkbook.Sheets(\u0026#34;文件预览\u0026#34;) On Error GoTo 0 If wsPreview Is Nothing Then Set wsPreview = ThisWorkbook.Sheets.Add wsPreview.Name = \u0026#34;文件预览\u0026#34; End If \u0026#39; 循环显示对话框，直到用户取消或选择文件 Do If .Show = -1 Then selectedFile = .SelectedItems(1) \u0026#39; 预览文件内容 wsPreview.Cells.Clear wsPreview.Cells(1, 1).Value = \u0026#34;文件预览: \u0026#34; \u0026amp; selectedFile wsPreview.Cells(1, 1).Font.Bold = True PreviewTextFile selectedFile, wsPreview \u0026#39; 询问用户是否确认选择 If MsgBox(\u0026#34;是否确认选择此文件?\u0026#34;, vbYesNo + vbQuestion) = vbYes Then MsgBox \u0026#34;您选择了: \u0026#34; \u0026amp; selectedFile, vbInformation Exit Do End If Else \u0026#39; 用户取消 MsgBox \u0026#34;已取消文件选择\u0026#34;, vbInformation Exit Do End If Loop End With Set fd = Nothing End Sub \u0026#39; 辅助函数：预览文本文件内容 Sub PreviewTextFile(filePath As String, ws As Worksheet) Dim fileNum As Integer Dim lineContent As String Dim rowNum As Long Dim maxLines As Integer maxLines = 50 \u0026#39; 最多预览50行 rowNum = 3 fileNum = FreeFile Open filePath For Input As #fileNum Do While Not EOF(fileNum) And rowNum \u0026lt;= maxLines + 2 Line Input #fileNum, lineContent ws.Cells(rowNum, 1).Value = lineContent rowNum = rowNum + 1 Loop \u0026#39; 如果文件超过最大预览行数 If Not EOF(fileNum) Then ws.Cells(rowNum, 1).Value = \u0026#34;...\u0026#34; ws.Cells(rowNum, 1).Font.Italic = True End If Close #fileNum ws.Columns(\u0026#34;A:A\u0026#34;).ColumnWidth = 80 ws.Range(\u0026#34;A2\u0026#34;).Value = \u0026#34;（最多显示\u0026#34; \u0026amp; maxLines \u0026amp; \u0026#34;行）\u0026#34; ws.Range(\u0026#34;A2\u0026#34;).Font.Italic = True End Sub 结合UserForm的文件选择器 \u0026#39; 以下代码应放在UserForm的代码窗口中 Private Sub cmdBrowse_Click() Dim fd As FileDialog Dim selectedFile As String \u0026#39; 创建文件对话框 Set fd = Application.FileDialog(msoFileDialogOpen) With fd .Title = \u0026#34;选择数据文件\u0026#34; .Filters.Clear .Filters.Add \u0026#34;Excel文件\u0026#34;, \u0026#34;*.xlsx;*.xls\u0026#34; .Filters.Add \u0026#34;CSV文件\u0026#34;, \u0026#34;*.csv\u0026#34; If .Show = -1 Then selectedFile = .SelectedItems(1) Me.txtFilePath.Value = selectedFile \u0026#39; 在文本框中显示路径 \u0026#39; 提取文件名显示在标签中 Me.lblFileName.Caption = \u0026#34;文件名: \u0026#34; \u0026amp; Mid(selectedFile, InStrRev(selectedFile, \u0026#34;\\\u0026#34;) + 1) End If End With Set fd = Nothing End Sub Private Sub cmdImport_Click() \u0026#39; 检查是否选择了文件 If Me.txtFilePath.Value = \u0026#34;\u0026#34; Then MsgBox \u0026#34;请先选择文件\u0026#34;, vbExclamation Exit Sub End If \u0026#39; 检查文件是否存在 If Dir(Me.txtFilePath.Value) = \u0026#34;\u0026#34; Then MsgBox \u0026#34;所选文件不存在\u0026#34;, vbExclamation Exit Sub End If \u0026#39; 执行导入操作（这里只是示例） MsgBox \u0026#34;开始导入文件: \u0026#34; \u0026amp; Me.txtFilePath.Value, vbInformation \u0026#39; 关闭窗体 Unload Me End Sub Private Sub cmdCancel_Click() Unload Me End Sub \u0026#39; 标准模块中的代码，用于显示UserForm Sub ShowFileImportForm() FileImportForm.Show \u0026#39; 假设UserForm名称为FileImportForm End Sub 批量文件处理工具 Sub BatchFileProcessor() Dim fd As FileDialog Dim i As Integer Dim filePaths As Variant Dim outputPath As String Dim wsReport As Worksheet Dim rowNum As Long \u0026#39; 选择要处理的多个文件 Set fd = Application.FileDialog(msoFileDialogFilePicker) With fd .Title = \u0026#34;选择要处理的文本文件\u0026#34; .Filters.Clear .Filters.Add \u0026#34;文本文件\u0026#34;, \u0026#34;*.txt\u0026#34; .AllowMultiSelect = True If .Show \u0026lt;\u0026gt; -1 Then MsgBox \u0026#34;未选择任何文件，操作已取消\u0026#34;, vbInformation Exit Sub End If filePaths = .SelectedItems End With \u0026#39; 选择保存结果的文件夹 Set fd = Application.FileDialog(msoFileDialogFolderPicker) With fd .Title = \u0026#34;选择结果保存文件夹\u0026#34; .InitialFileName = ThisWorkbook.Path If .Show \u0026lt;\u0026gt; -1 Then MsgBox \u0026#34;未选择保存文件夹，操作已取消\u0026#34;, vbInformation Exit Sub End If outputPath = .SelectedItems(1) End With \u0026#39; 创建报告工作表 Set wsReport = ThisWorkbook.Sheets.Add wsReport.Name = \u0026#34;批量处理报告\u0026#34; wsReport.Cells(1, 1).Value = \u0026#34;原始文件\u0026#34; wsReport.Cells(1, 2).Value = \u0026#34;处理后文件\u0026#34; wsReport.Cells(1, 3).Value = \u0026#34;状态\u0026#34; wsReport.Cells(1, 4).Value = \u0026#34;处理时间\u0026#34; wsReport.Rows(1).Font.Bold = True rowNum = 2 \u0026#39; 处理每个选中的文件 For i = LBound(filePaths) To UBound(filePaths) wsReport.Cells(rowNum, 1).Value = filePaths(i) wsReport.Cells(rowNum, 4).Value = Now() On Error Resume Next \u0026#39; 处理文件（这里只是示例：复制并添加处理标记） Dim sourceNum As Integer, destNum As Integer Dim content As String Dim fileName As String \u0026#39; 获取文件名 fileName = Mid(filePaths(i), InStrRev(filePaths(i), \u0026#34;\\\u0026#34;) + 1) \u0026#39; 读取源文件 sourceNum = FreeFile Open filePaths(i) For Input As #sourceNum content = Input(LOF(sourceNum), sourceNum) Close #sourceNum \u0026#39; 写入处理后的文件 destNum = FreeFile Open outputPath \u0026amp; \u0026#34;\\\u0026#34; \u0026amp; Replace(fileName, \u0026#34;.txt\u0026#34;, \u0026#34;_processed.txt\u0026#34;) For Output As #destNum Print #destNum, \u0026#34;=== 处理于 \u0026#34; \u0026amp; Now() \u0026amp; \u0026#34; ===\u0026#34; \u0026amp; vbCrLf Print #destNum, content Close #destNum \u0026#39; 记录结果 If Err.Number = 0 Then wsReport.Cells(rowNum, 2).Value = outputPath \u0026amp; \u0026#34;\\\u0026#34; \u0026amp; Replace(fileName, \u0026#34;.txt\u0026#34;, \u0026#34;_processed.txt\u0026#34;) wsReport.Cells(rowNum, 3).Value = \u0026#34;成功\u0026#34; Else wsReport.Cells(rowNum, 3).Value = \u0026#34;失败: \u0026#34; \u0026amp; Err.Description End If On Error GoTo 0 rowNum = rowNum + 1 Next i wsReport.Columns(\u0026#34;A:D\u0026#34;).AutoFit MsgBox \u0026#34;批量处理完成，共处理 \u0026#34; \u0026amp; UBound(filePaths) - LBound(filePaths) + 1 \u0026amp; \u0026#34; 个文件\u0026#34;, vbInformation Set fd = Nothing End Sub FileDialog与传统文件操作对比 特性 传统文件操作（Open语句） FileDialog 用户交互 需要手动输入路径，不直观 图形界面选择，直观友好 路径准确性 容易输入错误路径 避免手动输入错误 文件筛选 需要手动验证文件类型 内置筛选功能 多文件处理 需要手动输入多个路径 支持一次性选择多个文件 文件夹选择 需要手动输入文件夹路径 直观的文件夹浏览选择 使用复杂度 简单，适合固定路径 稍复杂，但更灵活 适用场景 路径固定的自动化任务 需要用户交互的场景 InputBox函数 InputBox函数可以创建一个简单的对话框，输入文本或数值。\nInputBox基础用法 Sub BasicInputBox() Dim userName As String \u0026#39; 基本用法 userName = InputBox(\u0026#34;请输入您的姓名:\u0026#34;, \u0026#34;输入姓名\u0026#34;) \u0026#39; 检查用户输入 If userName = \u0026#34;\u0026#34; Then MsgBox \u0026#34;您没有输入姓名\u0026#34;, vbInformation Else MsgBox \u0026#34;您好，\u0026#34; \u0026amp; userName \u0026amp; \u0026#34;！\u0026#34;, vbWelcomeMsg End If End Sub InputBox的完整参数 InputBox函数的完整语法：\nInputBox(prompt, [title], [default], [xpos], [ypos], [helpfile], [context]) 参数说明：\nprompt：必需，显示在对话框中的提示信息 title：可选，对话框的标题 default：可选，输入框中的默认值 xpos：可选，对话框的水平位置 ypos：可选，对话框的垂直位置 helpfile：可选，帮助文件的路径 context：可选，帮助主题的上下文编号 示例：\nSub InputBoxWithParameters() Dim ageStr As String Dim age As Integer \u0026#39; 使用完整参数的InputBox ageStr = InputBox( _ prompt:=\u0026#34;请输入您的年龄:\u0026#34;, _ title:=\u0026#34;年龄输入\u0026#34;, _ default:=\u0026#34;30\u0026#34;, _ xpos:=Application.Left + 100, _ ypos:=Application.Top + 100 _ ) \u0026#39; 验证输入 If ageStr = \u0026#34;\u0026#34; Then MsgBox \u0026#34;您取消了输入\u0026#34;, vbInformation ElseIf IsNumeric(ageStr) Then age = CInt(ageStr) If age \u0026gt; 0 And age \u0026lt; 150 Then MsgBox \u0026#34;您的年龄是: \u0026#34; \u0026amp; age, vbInformation Else MsgBox \u0026#34;请输入有效的年龄\u0026#34;, vbExclamation End If Else MsgBox \u0026#34;请输入数字\u0026#34;, vbExclamation End If End Sub 带帮助功能的InputBox Sub InputBoxWithHelp() Dim scoreStr As String Dim helpFile As String \u0026#39; 设置帮助文件路径（实际使用时替换为你的帮助文件） helpFile = \u0026#34;C:\\help\\score_help.chm\u0026#34; \u0026#39; 带帮助按钮的InputBox scoreStr = InputBox( _ prompt:=\u0026#34;请输入考试分数(0-100):\u0026#34;, _ title:=\u0026#34;分数输入\u0026#34;, _ default:=\u0026#34;80\u0026#34;, _ helpfile:=helpFile, _ context:=100 _ ) \u0026#39; 处理输入 If scoreStr = \u0026#34;\u0026#34; Then MsgBox \u0026#34;输入已取消\u0026#34;, vbInformation ElseIf IsNumeric(scoreStr) Then If CDbl(scoreStr) \u0026gt;= 0 And CDbl(scoreStr) \u0026lt;= 100 Then MsgBox \u0026#34;您输入的分数是: \u0026#34; \u0026amp; scoreStr, vbInformation Else MsgBox \u0026#34;分数必须在0-100之间\u0026#34;, vbExclamation End If Else MsgBox \u0026#34;请输入有效的数字\u0026#34;, vbExclamation End If End Sub 输入验证与循环 Sub InputBoxWithValidation() Dim quantityStr As String Dim quantity As Integer Dim isValid As Boolean isValid = False \u0026#39; 循环直到获得有效输入 Do While Not isValid quantityStr = InputBox( _ prompt:=\u0026#34;请输入订购数量(1-100):\u0026#34; \u0026amp; vbCrLf \u0026amp; _ \u0026#34;必须是1到100之间的整数\u0026#34;, _ title:=\u0026#34;数量输入\u0026#34;, _ default:=\u0026#34;10\u0026#34; _ ) \u0026#39; 检查是否取消 If quantityStr = \u0026#34;\u0026#34; Then MsgBox \u0026#34;已取消操作\u0026#34;, vbInformation Exit Sub End If \u0026#39; 验证输入 If IsNumeric(quantityStr) Then quantity = CInt(quantityStr) If quantity \u0026gt;= 1 And quantity \u0026lt;= 100 Then isValid = True \u0026#39; 有效输入，退出循环 Else MsgBox \u0026#34;数量必须在1到100之间\u0026#34;, vbExclamation End If Else MsgBox \u0026#34;请输入有效的数字\u0026#34;, vbExclamation End If Loop \u0026#39; 处理有效输入 MsgBox \u0026#34;您已订购 \u0026#34; \u0026amp; quantity \u0026amp; \u0026#34; 件商品\u0026#34;, vbInformation End Sub 结合文件操作的InputBox应用 Sub InputBoxAndFileOperation() Dim filePath As String Dim fileNumber As Integer Dim userInput As String Dim i As Integer \u0026#39; 使用InputBox获取文件路径 filePath = InputBox( _ prompt:=\u0026#34;请输入要保存的文件路径和名称:\u0026#34; \u0026amp; vbCrLf \u0026amp; _ \u0026#34;例如: C:\\data\\mynotes.txt\u0026#34;, _ title:=\u0026#34;保存文件\u0026#34;, _ default:=\u0026#34;C:\\data\\notes.txt\u0026#34; _ ) \u0026#39; 检查用户是否取消 If filePath = \u0026#34;\u0026#34; Then MsgBox \u0026#34;操作已取消\u0026#34;, vbInformation Exit Sub End If \u0026#39; 使用InputBox获取要保存的内容 userInput = InputBox( _ prompt:=\u0026#34;请输入要保存的内容:\u0026#34;, _ title:=\u0026#34;输入内容\u0026#34; _ ) If userInput = \u0026#34;\u0026#34; Then MsgBox \u0026#34;没有输入内容，文件未保存\u0026#34;, vbInformation Exit Sub End If \u0026#39; 保存到文件 On Error GoTo ErrorHandler fileNumber = FreeFile Open filePath For Output As #fileNumber Print #fileNumber, \u0026#34;内容保存时间: \u0026#34; \u0026amp; Now() Print #fileNumber, \u0026#34;-------------------------\u0026#34; Print #fileNumber, userInput Close #fileNumber MsgBox \u0026#34;内容已成功保存到:\u0026#34; \u0026amp; vbCrLf \u0026amp; filePath, vbInformation Exit Sub ErrorHandler: MsgBox \u0026#34;保存文件时出错: \u0026#34; \u0026amp; Err.Description, vbCritical On Error Resume Next Close #fileNumber End Sub 多步骤输入流程 Sub MultiStepInput() Dim customerInfo(1 To 4) As String Dim fields(1 To 4) As String Dim i As Integer Dim filePath As String Dim fileNumber As Integer \u0026#39; 定义要收集的字段 fields(1) = \u0026#34;客户姓名\u0026#34; fields(2) = \u0026#34;联系电话\u0026#34; fields(3) = \u0026#34;地址\u0026#34; fields(4) = \u0026#34;订单金额\u0026#34; \u0026#39; 分步收集信息 For i = 1 To 4 customerInfo(i) = InputBox( _ prompt:=\u0026#34;请输入\u0026#34; \u0026amp; fields(i) \u0026amp; \u0026#34;:\u0026#34;, _ title:=\u0026#34;输入客户信息 (\u0026#34; \u0026amp; i \u0026amp; \u0026#34;/4)\u0026#34;, _ default:=\u0026#34;\u0026#34; _ ) \u0026#39; 检查是否取消 If customerInfo(i) = \u0026#34;\u0026#34; Then If MsgBox(\u0026#34;确定要取消输入吗?\u0026#34;, vbYesNo + vbQuestion) = vbYes Then MsgBox \u0026#34;已取消客户信息输入\u0026#34;, vbInformation Exit Sub Else \u0026#39; 重新获取当前字段 i = i - 1 \u0026#39; 因为循环会自动+1，所以这里-1 End If End If Next i \u0026#39; 显示收集的信息 Dim summary As String summary = \u0026#34;收集的客户信息如下:\u0026#34; \u0026amp; vbCrLf For i = 1 To 4 summary = summary \u0026amp; fields(i) \u0026amp; \u0026#34;: \u0026#34; \u0026amp; customerInfo(i) \u0026amp; vbCrLf Next i \u0026#39; 询问是否保存 If MsgBox(summary \u0026amp; vbCrLf \u0026amp; \u0026#34;是否保存这些信息?\u0026#34;, vbYesNo + vbQuestion) = vbYes Then filePath = \u0026#34;C:\\data\\customers\\\u0026#34; \u0026amp; Format(Now(), \u0026#34;yyyymmdd_hhnnss\u0026#34;) \u0026amp; \u0026#34;.txt\u0026#34; fileNumber = FreeFile Open filePath For Output As #fileNumber Print #fileNumber, summary Close #fileNumber MsgBox \u0026#34;信息已保存到: \u0026#34; \u0026amp; filePath, vbInformation End If End Sub 综合案例：文件管理工具 下面是一个结合文件操作和InputBox的综合案例，实现一个简单的文件管理工具：\nSub FileManagerTool() Dim choice As Integer Dim running As Boolean running = True \u0026#39; 主循环 Do While running \u0026#39; 显示菜单 choice = MsgBox( _ \u0026#34;文件管理工具\u0026#34; \u0026amp; vbCrLf \u0026amp; vbCrLf \u0026amp; _ \u0026#34;1. 读取文本文件\u0026#34; \u0026amp; vbCrLf \u0026amp; _ \u0026#34;2. 创建新文件\u0026#34; \u0026amp; vbCrLf \u0026amp; _ \u0026#34;3. 追加到文件\u0026#34; \u0026amp; vbCrLf \u0026amp; _ \u0026#34;4. 批量重命名文件\u0026#34; \u0026amp; vbCrLf \u0026amp; _ \u0026#34;5. 退出\u0026#34;, _ vbYesNoCancel + vbQuestion + vbSystemModal, _ \u0026#34;文件管理工具\u0026#34; _ ) \u0026#39; 根据用户选择执行相应功能 Select Case choice Case vbYes: ReadTextFileTool \u0026#39; 读取文本文件 Case vbNo: CreateNewFileTool \u0026#39; 创建新文件 Case vbCancel: AppendToFileTool \u0026#39; 追加到文件 \u0026#39; 可以在这里添加其他功能的调用 Case Else: running = False \u0026#39; 退出 End Select Loop End Sub \u0026#39; 读取文本文件工具 Sub ReadTextFileTool() Dim filePath As String \u0026#39; 获取文件路径 filePath = InputBox( _ \u0026#34;请输入要读取的文本文件路径:\u0026#34;, _ \u0026#34;读取文件\u0026#34;, _ \u0026#34;C:\\data\\example.txt\u0026#34; _ ) If filePath = \u0026#34;\u0026#34; Then Exit Sub \u0026#39; 检查文件是否存在 If Dir(filePath) = \u0026#34;\u0026#34; Then MsgBox \u0026#34;文件不存在: \u0026#34; \u0026amp; filePath, vbExclamation Exit Sub End If \u0026#39; 读取并显示文件内容 Dim fileNumber As Integer Dim content As String fileNumber = FreeFile Open filePath For Input As #fileNumber content = Input(LOF(fileNumber), fileNumber) Close #fileNumber \u0026#39; 创建显示内容的工作表 Dim ws As Worksheet On Error Resume Next Set ws = ThisWorkbook.Sheets(\u0026#34;文件内容\u0026#34;) On Error GoTo 0 If ws Is Nothing Then Set ws = ThisWorkbook.Sheets.Add ws.Name = \u0026#34;文件内容\u0026#34; Else ws.Cells.Clear End If \u0026#39; 显示文件信息和内容 ws.Cells(1, 1).Value = \u0026#34;文件路径:\u0026#34; ws.Cells(1, 2).Value = filePath ws.Cells(2, 1).Value = \u0026#34;文件大小:\u0026#34; ws.Cells(2, 2).Value = FileLen(filePath) \u0026amp; \u0026#34; 字节\u0026#34; ws.Cells(3, 1).Value = \u0026#34;修改时间:\u0026#34; ws.Cells(3, 2).Value = FileDateTime(filePath) ws.Cells(5, 1).Value = \u0026#34;文件内容:\u0026#34; \u0026#39; 将内容按行拆分 Dim lines() As String lines = Split(content, vbCrLf) \u0026#39; 写入内容到工作表 Dim i As Integer For i = 0 To UBound(lines) ws.Cells(6 + i, 1).Value = lines(i) Next i \u0026#39; 格式化工作表 ws.Columns(\u0026#34;A:A\u0026#34;).ColumnWidth = 50 ws.Rows(\u0026#34;1:3\u0026#34;).Font.Bold = True ws.Range(\u0026#34;A5\u0026#34;).Font.Bold = True MsgBox \u0026#34;文件内容已显示在 \u0026#34;\u0026#34;文件内容\u0026#34;\u0026#34; 工作表中\u0026#34;, vbInformation End Sub \u0026#39; 创建新文件工具 Sub CreateNewFileTool() Dim filePath As String Dim content As String Dim fileNumber As Integer \u0026#39; 获取文件路径 filePath = InputBox( _ \u0026#34;请输入要创建的文件路径和名称:\u0026#34;, _ \u0026#34;创建新文件\u0026#34;, _ \u0026#34;C:\\data\\newfile.txt\u0026#34; _ ) If filePath = \u0026#34;\u0026#34; Then Exit Sub \u0026#39; 检查文件是否已存在 If Dir(filePath) \u0026lt;\u0026gt; \u0026#34;\u0026#34; Then If MsgBox(\u0026#34;文件已存在，是否覆盖?\u0026#34;, vbYesNo + vbQuestion) = vbNo Then Exit Sub End If End If \u0026#39; 获取文件内容 content = InputBox( _ \u0026#34;请输入文件内容:\u0026#34;, _ \u0026#34;输入内容\u0026#34; _ ) If content = \u0026#34;\u0026#34; Then If MsgBox(\u0026#34;内容为空，仍要创建文件吗?\u0026#34;, vbYesNo + vbQuestion) = vbNo Then Exit Sub End If End If \u0026#39; 创建文件并写入内容 On Error GoTo ErrorHandler fileNumber = FreeFile Open filePath For Output As #fileNumber Print #fileNumber, content Close #fileNumber MsgBox \u0026#34;文件已创建: \u0026#34; \u0026amp; filePath, vbInformation Exit Sub ErrorHandler: MsgBox \u0026#34;创建文件失败: \u0026#34; \u0026amp; Err.Description, vbCritical On Error Resume Next Close #fileNumber End Sub \u0026#39; 追加到文件工具 Sub AppendToFileTool() Dim filePath As String Dim content As String Dim fileNumber As Integer \u0026#39; 获取文件路径 filePath = InputBox( _ \u0026#34;请输入要追加内容的文件路径:\u0026#34;, _ \u0026#34;追加到文件\u0026#34;, _ \u0026#34;C:\\data\\log.txt\u0026#34; _ ) If filePath = \u0026#34;\u0026#34; Then Exit Sub \u0026#39; 检查文件是否存在 If Dir(filePath) = \u0026#34;\u0026#34; Then If MsgBox(\u0026#34;文件不存在，是否创建新文件?\u0026#34;, vbYesNo + vbQuestion) = vbNo Then Exit Sub End If End If \u0026#39; 获取要追加的内容 content = InputBox( _ \u0026#34;请输入要追加的内容:\u0026#34;, _ \u0026#34;输入内容\u0026#34; _ ) If content = \u0026#34;\u0026#34; Then MsgBox \u0026#34;内容为空，未进行任何操作\u0026#34;, vbInformation Exit Sub End If \u0026#39; 追加内容 On Error GoTo ErrorHandler fileNumber = FreeFile Open filePath For Append As #fileNumber Print #fileNumber, \u0026#34;[\u0026#34; \u0026amp; Format(Now(), \u0026#34;yyyy-mm-dd hh:nn:ss\u0026#34;) \u0026amp; \u0026#34;] \u0026#34; \u0026amp; content Close #fileNumber MsgBox \u0026#34;内容已追加到文件: \u0026#34; \u0026amp; filePath, vbInformation Exit Sub ErrorHandler: MsgBox \u0026#34;操作失败: \u0026#34; \u0026amp; Err.Description, vbCritical On Error Resume Next Close #fileNumber End Sub 进阶学习建议 深入学习对象模型：\n研究Excel对象模型的层次结构 掌握Workbook、Worksheet、Range等核心对象的属性和方法 学习正则表达式：\n\u0026#39; 引用Microsoft VBScript Regular Expressions 5.5 Sub RegexDemo() Dim regEx As New RegExp regEx.Pattern = \u0026#34;\\d{11}\u0026#34; \u0026#39; 匹配11位数字（手机号） MsgBox regEx.Test(\u0026#34;13800138000\u0026#34;) \u0026#39; 输出True End Sub 学习字典对象：\n\u0026#39; 引用Microsoft Scripting Runtime Sub DictionaryDemo() Dim dict As New Dictionary dict.Add \u0026#34;Name\u0026#34;, \u0026#34;张三\u0026#34; dict.Add \u0026#34;Age\u0026#34;, 30 MsgBox dict(\u0026#34;Name\u0026#34;) \u0026#39; 输出：张三 End Sub 学习类模块：创建自定义对象，提高代码复用性\n探索其他Office应用：将VBA知识应用到Word、PowerPoint、Outlook等\n总结 通过本教程为VBA的核心语法、Excel对象模型操作及实用脚本编写。建议从录制宏开始，逐步分析生成的代码，并尝试修改以满足实际需求。\n注意：在运行任何VBA代码前，请备份重要数据。对于复杂操作，建议先在测试环境中验证。\n附录 官方文档： Microsoft Learn VBA教程 书籍： 《Excel VBA从入门到精通》 《VBA经典应用69例》 社区与论坛： ExcelHome技术论坛 Stack Overflow VBA专区 参考文章 ","date":"2025-10-16T21:56:27+08:00","permalink":"https://allergicrosen.fun/p/vba_learning/","title":"VBA_learning"},{"content":"PowerShell GUI脚本开发\n在公司电脑没有管理员权限、没有互联网连接的情况下，使用PowerShell内置的.NET框架创建图形用户界面(GUI)应用程序。主要利用以下两种技术：\nWindows Forms (WinForms)（新手推荐） Windows Presentation Foundation (WPF) 实战示例：文件搜索工具 完整代码:\nAdd-Type -AssemblyName System.Windows.Forms Add-Type -AssemblyName System.Drawing # 创建主窗体 $form = New-Object System.Windows.Forms.Form $form.Text = \u0026#34;File Search Tool\u0026#34; $form.Size = New-Object System.Drawing.Size(600, 500) $form.StartPosition = \u0026#34;CenterScreen\u0026#34; $form.MinimizeBox = $false $form.MaximizeBox = $false $form.FormBorderStyle = \u0026#39;Fixed3D\u0026#39; # 创建目录选择标签 $labelDirectory = New-Object System.Windows.Forms.Label $labelDirectory.Location = New-Object System.Drawing.Point(10, 15) $labelDirectory.Size = New-Object System.Drawing.Size(150, 20) $labelDirectory.Text = \u0026#34;Select Directory:\u0026#34; $form.Controls.Add($labelDirectory) # 创建目录显示文本框 $textBoxDirectory = New-Object System.Windows.Forms.TextBox $textBoxDirectory.Location = New-Object System.Drawing.Point(110, 20) $textBoxDirectory.Size = New-Object System.Drawing.Size(350, 20) $textBoxDirectory.ReadOnly = $true $form.Controls.Add($textBoxDirectory) # 创建浏览按钮 $buttonBrowse = New-Object System.Windows.Forms.Button $buttonBrowse.Location = New-Object System.Drawing.Point(470, 18) $buttonBrowse.Size = New-Object System.Drawing.Size(75, 23) $buttonBrowse.Text = \u0026#34;Browse...\u0026#34; $form.Controls.Add($buttonBrowse) # 创建文件名标签 $labelFileName = New-Object System.Windows.Forms.Label $labelFileName.Location = New-Object System.Drawing.Point(10, 60) $labelFileName.Size = New-Object System.Drawing.Size(150, 20) $labelFileName.Text = \u0026#34;File Name:\u0026#34; $form.Controls.Add($labelFileName) # 创建文件名输入框 $textBoxFileName = New-Object System.Windows.Forms.TextBox $textBoxFileName.Location = New-Object System.Drawing.Point(110, 60) $textBoxFileName.Size = New-Object System.Drawing.Size(350, 20) $textBoxFileName.Text = \u0026#34;*.*\u0026#34; $form.Controls.Add($textBoxFileName) # 创建搜索按钮 $buttonSearch = New-Object System.Windows.Forms.Button $buttonSearch.Location = New-Object System.Drawing.Point(470, 58) $buttonSearch.Size = New-Object System.Drawing.Size(75, 23) $buttonSearch.Text = \u0026#34;Search\u0026#34; $form.Controls.Add($buttonSearch) # 创建结果列表框 $listBoxResults = New-Object System.Windows.Forms.ListBox $listBoxResults.Location = New-Object System.Drawing.Point(10, 100) $listBoxResults.Size = New-Object System.Drawing.Size(560, 300) $listBoxResults.Anchor = \u0026#39;Top, Bottom, Left, Right\u0026#39; $listBoxResults.Font = New-Object System.Drawing.Font(\u0026#34;Consolas\u0026#34;, 9) $form.Controls.Add($listBoxResults) # 创建状态标签 $labelStatus = New-Object System.Windows.Forms.Label $labelStatus.Location = New-Object System.Drawing.Point(10, 420) $labelStatus.Size = New-Object System.Drawing.Size(560, 20) $labelStatus.Text = \u0026#34;Ready. Please select a directory and enter a file name.\u0026#34; $labelStatus.TextAlign = \u0026#39;MiddleLeft\u0026#39; $form.Controls.Add($labelStatus) # 创建打开位置按钮 $buttonOpenLocation = New-Object System.Windows.Forms.Button $buttonOpenLocation.Location = New-Object System.Drawing.Point(10, 450) $buttonOpenLocation.Size = New-Object System.Drawing.Size(150, 23) $buttonOpenLocation.Text = \u0026#34;Open File Location\u0026#34; $buttonOpenLocation.Enabled = $false $form.Controls.Add($buttonOpenLocation) # 创建退出按钮 $buttonExit = New-Object System.Windows.Forms.Button $buttonExit.Location = New-Object System.Drawing.Point(470, 450) $buttonExit.Size = New-Object System.Drawing.Size(75, 23) $buttonExit.Text = \u0026#34;Exit\u0026#34; $form.Controls.Add($buttonExit) # 创建一个全局列表来存储文件对象 $global:fileList = New-Object System.Collections.ArrayList # 浏览按钮点击事件 $buttonBrowse.Add_Click({ $folderBrowser = New-Object System.Windows.Forms.FolderBrowserDialog $folderBrowser.Description = \u0026#34;Please select a directory to search\u0026#34; $folderBrowser.RootFolder = \u0026#39;MyComputer\u0026#39; if ($folderBrowser.ShowDialog() -eq \u0026#39;OK\u0026#39;) { $textBoxDirectory.Text = $folderBrowser.SelectedPath } $folderBrowser.Dispose() }) # 搜索按钮点击事件 $buttonSearch.Add_Click({ $searchDir = $textBoxDirectory.Text $searchPattern = $textBoxFileName.Text if ([string]::IsNullOrEmpty($searchDir)) { [System.Windows.Forms.MessageBox]::Show(\u0026#34;Please select a directory first!\u0026#34;, \u0026#34;Warning\u0026#34;, \u0026#34;OK\u0026#34;, \u0026#34;Warning\u0026#34;) return } if (-not (Test-Path -Path $searchDir)) { [System.Windows.Forms.MessageBox]::Show(\u0026#34;The selected directory does not exist!\u0026#34;, \u0026#34;Error\u0026#34;, \u0026#34;OK\u0026#34;, \u0026#34;Error\u0026#34;) return } $labelStatus.Text = \u0026#34;Searching... Please wait.\u0026#34; $listBoxResults.Items.Clear() $buttonOpenLocation.Enabled = $false $global:fileList.Clear() try { $files = Get-ChildItem -Path $searchDir -Filter $searchPattern -File -Recurse -ErrorAction SilentlyContinue foreach ($file in $files) { $displayString = \u0026#34;{0:yyyy-MM-dd HH:mm} | {1,10:N0} KB | {2}\u0026#34; -f $file.LastWriteTime, ($file.Length / 1KB), $file.Name $listBoxResults.Items.Add($displayString) # 将文件对象添加到全局列表，与列表框中的索引对应 $global:fileList.Add($file) | Out-Null } $labelStatus.Text = \u0026#34;Search completed. Found $($files.Count) files.\u0026#34; } catch { $labelStatus.Text = \u0026#34;Error during search: $($_.Exception.Message)\u0026#34; } }) # 列表框选择变化事件 $listBoxResults.Add_SelectedIndexChanged({ $buttonOpenLocation.Enabled = ($listBoxResults.SelectedIndex -ne -1) }) # 打开位置按钮点击事件 $buttonOpenLocation.Add_Click({ if ($listBoxResults.SelectedIndex -ne -1) { $selectedFile = $global:fileList[$listBoxResults.SelectedIndex] Start-Process \u0026#34;explorer.exe\u0026#34; -ArgumentList (\u0026#34;/select, `\u0026#34;{0}`\u0026#34;\u0026#34; -f $selectedFile.FullName) } }) # 退出按钮点击事件 $buttonExit.Add_Click({ $form.Close() }) # 启动窗体 [void]$form.ShowDialog() 运行后可以看到： 这便是以上代码实现的情况，后续将会深入研究Windows.form的使用方法，为工作创建实用的脚本。\n附录 Windows PowerShell实战指南（第3版） 参考文章 ","date":"2025-09-10T22:39:53+08:00","permalink":"https://allergicrosen.fun/p/windows_powershell_gui/","title":"Windows powershell GUI 方法"},{"content":"本笔记记录公司限制连接外网，且无法获取管理员权限的情况下安装PowerShell模块的教程。 有网络直接命令行输入：Install-Module -Name 模块名称\n核心思路 由于无法通过Install-Module自动解决依赖，我们需要手动确保模块的所有依赖项都完整存在，并且放置在PowerShell能够识别的个人模块目录中。\n获取PowerShell的模块压缩包 从PowerShellGallery 获取所需module 确认正确的模块目录结构(以ImportExcel为例) PowerShell对模块的目录结构有严格的要求。仅仅将解压的文件放到一个文件夹并添加到PSModulePath是不够的。正确的结构必须是：\n你的模块根目录/ └── ImportExcel/ ├── ImportExcel.psd1 \u0026lt;-- 模块清单文件 ├── ImportExcel.psm1 \u0026lt;-- 主脚本模块文件 (通常存在) ├── Microsoft.PowerShell.Utility.psm1 \u0026lt;-- 可能需要的依赖模块 ├── Microsoft.PowerShell.Commands.Utility.dll ├── ... (其他dll依赖文件) └── lib/ └── ... (更多的.NET程序集依赖) 网上下载的.nupkg文件实际上是一个zip压缩包，解压后里面可能还有一个lib文件夹，包含对应.NET版本的文件夹（如net472, netstandard2.0等）。需要的是这个子文件夹里的内容。\n检查解压后的文件夹结构是否与上述类似。如果只是一个散乱的文件堆，那很可能是解压的层级不对。\n手动安装到个人模块目录 这是最关键的一步，因为没有管理员权限，无法安装到系统级的Program Files目录。PowerShell允许用户在自己的文档目录下安装模块。\n创建个人模块目录（如果不存在）： 在PowerShell中运行以下命令，它会自动创建正确的目录：\nNew-Item -ItemType Directory -Path $HOME\\Documents\\PowerShell\\Modules -Force 这个路径（C:\\Users\\\u0026lt;你的用户名\u0026gt;\\Documents\\PowerShell\\Modules）会自动被PowerShell识别，无需手动修改系统环境变量。\n放置模块文件： 将整理好的 整个 ImportExcel 文件夹（确保其结构正确），复制或移动到上一步创建的Modules目录下。\nC:\\Users\\\u0026lt;你的用户名\u0026gt;\\Documents\\PowerShell\\Modules\\ └── ImportExcel/ \u0026lt;-- 整个文件夹放在这里 ├── ImportExcel.psd1 ├── ImportExcel.psm1 ├── ... └── lib/ 解决依赖问题（错误的主要原因） ImportExcel模块依赖于多个.NET程序集（如EPPlus、DocumentFormat.OpenXml等）。离线安装时，这些依赖项必须随主模块一起提供。\n验证依赖项： 用文本编辑器（如VSCode、Notepad++）打开 ImportExcel.psd1 文件。 查找 RequiredModules 和 NestedModules 字段。这里会声明它需要哪些其他模块和程序集。\n确保所有文件齐全： 根据ImportExcel.psd1中的声明，检查ImportExcel文件夹下是否包含了所有必需的.dll文件和.psm1文件。常见的依赖包括：\nEPPlus.dll (最重要的依赖)\nDocumentFormat.OpenXml.dll\nSystem.IO.Packaging.dll\n其他在lib文件夹下的dll文件。\n如果这些文件缺失，需要从原始下载的nupkg包中或从另一台有网络的电脑上通过Save-Module命令重新获取完整模块。\n重新导入并测试 关闭当前所有的PowerShell窗口。\n重新打开一个新的 PowerShell窗口。这是为了确保它重新读取模块路径。\n尝试导入模块：\nImport-Module ImportExcel -Verbose 添加 -Verbose 参数可以看到详细的加载信息，帮助定位是哪个具体的依赖项加载失败。\n如果导入成功，运行一个简单命令测试：\nGet-Command -Module ImportExcel 这会列出所有ImportExcel模块的命令，如果能看到一长串以Export-、Import-开头的命令，说明安装成功。\n如果经过以上步骤仍然报错，可以尝试手动加载依赖： 在导入ImportExcel之前，先尝试手动加载其依赖的DLL。首先进入的模块目录：\n# 首先CD到你的ImportExcel模块目录 cd $HOME\\Documents\\PowerShell\\Modules\\ImportExcel # 尝试手动加载关键依赖，例如EPPlus（根据你实际有的dll文件名来加载） Add-Type -Path \u0026#34;.\\EPPlus.dll\u0026#34; # 加载其他可能需要的dll... # Add-Type -Path \u0026#34;.\\DocumentFormat.OpenXml.dll\u0026#34; 再导入模块 Import-Module .\\ImportExcel.psd1 -Verbose 观察哪一条Add-Type命令报错，那就是缺失的文件。\n检查PowerShell版本： 确保的电脑PowerShell版本不是太老（如PS 2.0）。ImportExcel可能需要PS 3.0或更高版本。运行$PSVersionTable.PSVersion查看。\n终极方法：重新获取完整模块 这是最可能解决问题的办法。找一台有互联网连接的电脑，以管理员身份运行PowerShell，执行：\nSave-Module -Name ImportExcel -Path C:\\Temp\\OfflineModules 这会将ImportExcel模块及其所有依赖项完整地下载到C:\\Temp\\OfflineModules目录。然后将这个目录下的ImportExcel文件夹完整地复制到公司电脑的个人模块目录（$HOME\\Documents\\PowerShell\\Modules）中。这能100%确保依赖项的完整性。 成功验证 导入模块后，请运行以下命令来验证是否安装成功：\nGet-Command -Module ImportExcel | Select-Object -First 5 Get-Module ImportExcel | Format-List Version, Path 如果这些命令能返回模块的版本信息和命令列表，那就安装成功了！\nPS C:\\Users\\Administrator\u0026gt; Get-Command -Module ImportExcel | Select-Object -First 5 CommandType Name Version Source ----------- ---- ------- ------ Alias Convert-XlRangeToImage 7.8.10 ImportExcel Alias Export-ExcelSheet 7.8.10 ImportExcel Alias New-ExcelChart 7.8.10 ImportExcel Alias Set-Column 7.8.10 ImportExcel Alias Set-Format 7.8.10 ImportExcel 总结 无法一键安装直接尝试手动import依赖和模块\n附录 PowerShellGallery 参考文章 ","date":"2025-09-10T22:18:05+08:00","image":"https://allergicrosen.fun/p/windows_powershell_module/cover_hu_278b3405a21b9695.png","permalink":"https://allergicrosen.fun/p/windows_powershell_module/","title":"Windows powershell module install"},{"content":" 被这个问题折磨了很久一直没发现是什么原因，具体就是每次电脑重启都会这样，一直使用360自带的断网急救箱解决，但是每次开机都需要这样设置非常麻烦！\n直到有一天刷视频发现了代理相关的设置可能会导致这样的问题，电脑因为需要连接集群，所以有好几个VPN软件，但是之前一直是没有问题的，也不知道是什么时候有改动设置。\n重置代理设置 好了，现在将展示修改代理，其实随便百度下就知道如何了，这里简单示意下。（以Windows 11 为例）\n首先打开网络和Internet，找到高级网络设置。\n接着找到internet选项\n点击Internet属性，依次点击连接-局域网设置。\n接着取消勾选局域网（LAN）设置。\n这样，下次重启浏览器就可以正常使用了！\n附录 参考文章 ","date":"2025-06-13T20:25:09+08:00","permalink":"https://allergicrosen.fun/p/%E5%85%B3%E4%BA%8E%E7%94%B5%E8%84%91%E5%BE%AE%E4%BF%A1qq%E7%AD%89%E8%BD%AF%E4%BB%B6%E6%9C%89%E7%BD%91%E4%BD%86%E6%98%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E6%97%A0%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/","title":"关于电脑微信QQ等软件有网，但是浏览器无网络相关问题"},{"content":"Windows 特殊字符快捷键大全（Alt 代码） 常用数学符号 符号 描述 快捷键（Alt + 数字） π 圆周率 Alt + 227 ∞ 无穷大 Alt + 236 ± 正负号 Alt + 241 × 乘号 Alt + 0215 ÷ 除号 Alt + 0247 ≈ 约等于 Alt + 247 ≠ 不等于 Alt + 8800（部分程序支持） ≤ 小于等于 Alt + 243 ≥ 大于等于 Alt + 242 √ 平方根 Alt + 251 ∑ 求和 Alt + 8721（部分程序支持） ∫ 积分 Alt + 8747（部分程序支持） 希腊字母（常用于数学/物理） 符号 描述 快捷键（Alt + 数字） α Alpha Alt + 224 β Beta Alt + 225 γ Gamma Alt + 226 δ Delta Alt + 235 ε Epsilon Alt + 238 θ Theta Alt + 233 λ Lambda Alt + 955（部分程序支持） μ Mu（微米、摩尔质量） Alt + 230 σ Sigma（标准差） Alt + 963（部分程序支持） Ω Omega Alt + 234 货币符号 符号 描述 快捷键（Alt + 数字） ¥ 人民币/日元 Alt + 157 € 欧元 Alt + 0128 £ 英镑 Alt + 156 $ 美元 Shift + 4（直接输入） ¢ 美分 Alt + 155 单位符号 符号 描述 快捷键（Alt + 数字） ° 摄氏度（角度符号） Alt + 0176 ‰ 千分比 Alt + 0137 ′ 单引号（角度/时间单位） Alt + 8242（部分程序支持） ″ 双引号（角度/时间单位） Alt + 8243（部分程序支持） 标点和特殊字符 符号 描述 快捷键（Alt + 数字） © 版权 Alt + 0169 ® 注册商标 Alt + 0174 ™ 商标 Alt + 0153 § 段落符号 Alt + 21 ¶ 段落标记 Alt + 20 箭头符号 符号 描述 快捷键（Alt + 数字） ← 左箭头 Alt + 27 ↑ 上箭头 Alt + 24 → 右箭头 Alt + 26 ↓ 下箭头 Alt + 25 扑克/卡牌/符号 符号 描述 快捷键（Alt + 数字） ♠ 黑桃 Alt + 6 ♥ 红桃 Alt + 3 ♦ 方块 Alt + 4 ♣ 梅花 Alt + 5 实用技巧 1. 使用字符映射表（charmap） 按 Win + R，输入 charmap，回车 选择符号，点击 复制，然后粘贴（Ctrl + V） 2. 使用 Unicode（部分软件支持） 在 Word 或记事本输入 Unicode 码（如 03C0） 按 Alt + X，即可转换成符号 3. 直接复制粘贴 π ∞ ≤ ≥ ± ÷ × ≠ 直接复制粘贴 附录 参考文章 ","date":"2025-03-11T17:36:14+08:00","permalink":"https://allergicrosen.fun/p/windows_charmap/","title":"Windows 特殊字符快捷键（Alt 代码）"},{"content":"记录些有用的命令 rsync rsync -av --progress source/ destination/\ncp命令复制太慢也不显示进度，此命令较快且可以知道进度\n参数说明： -a：归档模式，保留文件属性（如权限、时间戳等），并递归复制目录。\n-v：显示详细输出，便于跟踪进度。\n--progress：显示复制进度。\n为什么 rsync 更快？\n增量传输：rsync 只复制源和目标之间不同的部分，而不是整个文件。\n压缩传输：可以通过 -z 参数启用压缩，减少传输数据量。\n高效算法：rsync 使用高效的算法来比较文件差异，减少不必要的复制。\n加速复制的额外选项\n**⚪ 启用压缩：**如果复制大量小文件或网络传输，可以启用压缩：\nrsync -avz --progress source/ destination/\n**⚪ 并行复制：**对于大量小文件，可以使用 \u0026ndash;progress 和 \u0026ndash;partial 来加速：\nrsync -av --progress --partial source/ destination/\n**⚪ 多线程复制：**如果需要更快速度，可以使用 rsync 的多线程功能（需要较新版本的 rsync）：\nrsync -av --progress --partial --inplace --rsh=\u0026quot;ssh -T -c aes128-ctr -o Compression=no -x\u0026quot; source/ destination/\n**注意事项 ** 源路径的斜杠：\n如果源路径以斜杠结尾（如 source/），rsync 会复制目录内容到目标路径。\n如果源路径不以斜杠结尾（如 source），rsync 会复制整个目录到目标路径。\n目标路径：\n如果目标路径不存在，rsync 会自动创建。\n网络传输：\n如果源和目标位于不同机器，可以通过 SSH 使用 rsync：\nrsync -avz --progress -e ssh user@remote:/source/ /destination/\nawk 处理大型数据该命令非常高效，且无需其它环境\nawk '{sum += ($2 \u0026lt; 0 ? -$2 : $2); count++} END {print sum/count}' data.txt\n例如计算data.txt第二列数据绝对值和的平均值，秒出结果！！！\nawk 是一种强大的文本处理工具，专门用于逐行处理和分析结构化文本数据（如 CSV、日志文件等）。它的名字来源于其三位创始人 Alfred Aho、Peter Weinberger 和 Brian Kernighan 的姓氏首字母。\nawk 的基本工作原理是：\n逐行读取输入文件。\n根据指定的规则（模式）匹配行。\n对匹配的行执行相应的操作（动作）。\nawk 'pattern { action }' input_file\n**pattern：**匹配行的条件（可选）。如果省略，则对所有行执行 action。\n**action：**对匹配行执行的操作（可选）。如果省略，则默认打印匹配的行。\n**input_file：**输入文件。如果省略，则从标准输入读取数据。\n常用变量 $0：整行内容。\n$1, $2, \u0026hellip;, $N：第 1、2、\u0026hellip;、N 列的内容（默认以空格或制表符分隔）。\nNF：当前行的列数。\nNR：当前行的行号。\nFS：输入字段分隔符（默认是空格或制表符）。\nOFS：输出字段分隔符（默认是空格）。\n示例文件 假设有一个文件 data.txt，内容如下：\n1 10.5 A 2 -3.2 B 3 7.8 C 4 -1.1 D 打印整行\nawk \u0026#39;{print $0}\u0026#39; data.txt 打印指定列\n打印第二列：\nawk \u0026#39;{print $2}\u0026#39; data.txt 条件过滤\n打印第二列大于 0 的行：\nawk \u0026#39;$2 \u0026gt; 0 {print $0}\u0026#39; data.txt 计算列的平均值\n计算第二列的平均值：\nawk \u0026#39;{sum += $2; count++} END {print sum/count}\u0026#39; data.txt 修改字段分隔符\n如果文件是以逗号分隔的 CSV 文件，可以修改 FS：\nawk -F, \u0026#39;{print $2}\u0026#39; data.csv 取绝对值并计算平均值\n对第二列取绝对值并计算平均值：\nawk \u0026#39;{sum += ($2 \u0026lt; 0 ? -$2 : $2); count++} END {print sum/count}\u0026#39; data.txt 添加行号\n打印每行内容并添加行号：\nawk \u0026#39;{print NR, $0}\u0026#39; data.txt 多条件匹配\n打印第二列大于 0 且第三列是 \u0026ldquo;A\u0026rdquo; 或 \u0026ldquo;B\u0026rdquo; 的行：\nawk \u0026#39;$2 \u0026gt; 0 \u0026amp;\u0026amp; ($3 == \u0026#34;A\u0026#34; || $3 == \u0026#34;B\u0026#34;) {print $0}\u0026#39; data.txt 附录 参考文章 ","date":"2025-01-16T01:34:15+08:00","permalink":"https://allergicrosen.fun/p/shell-command/","title":"shell command"},{"content":"介绍VASP对弹性模量，泊松比等力学常数的相关计算。\n弹性常数描述了晶体对外加应变的响应的刚度。在材料的线性变形范围内（应变较小的情况下），体系的应力与应变满足胡克定律(F=-kx )。也就是说，对于足够的小的变形，应力与应变成正比，即应力分量(S)是应变分量(E)的线性函数，材料在各个方向上的弹性模量不同，最好体现这种不同的方式就是将胡克定律推广到矩阵形式。\n三维材料的弹性刚度常数矩阵是6×6的：\n刚度矩阵C是一个对称矩阵Cij =Cji,因此独立矩阵元至多有21个，此外晶系的对称性越高，独立元的数目就越少。有关于各种晶系的弹性矩阵大家可以自行百度搜索。\n计算矩阵 VASP5.2以上版本计算弹性常数很方便，在INCAR中添加IBRION=6,NFREE=4,ISIF=3。计算结束后会产生刚度矩阵，即得到了弹性常数(Cij)\n例如示例INCAR，INCAR建议设置较高精度 ISTART =0 ICHARG = 2 ENCUT=500 EDIFF=1E-8 NSW=1 EDIFFG=-1e-2 ISIF=3 IBRION=6 #计算弹性常数，详见vaspwiki POTIM=0.015 NFREE = 4 其它文件自行准备。\n计算完OUTCAR里面会有刚度矩阵\n提取矩阵并处理 利用vaspkit帮助处理数据\n$ vaspkit \\\\\\/// / _ _ \\ Hey, you must know what you are doing. (| (o)(o) |) Otherwise you might get wrong results. o-----.OOOo--()--oOOO.------------------------------------------o | VASPKIT Standard Edition 1.5.1 (27 Jan. 2024) | | Lead Developer: Vei WANG (wangvei@icloud.com) | | Main Contributors: Gang TANG, Nan XU \u0026amp; Jin-Cheng LIU | | Online Tutorials Available on Website: https://vaspkit.com | o-----.oooO-----------------------------------------------------o ( ) Oooo. VASPKIT Made Simple \\ ( ( ) \\_) ) / (_/ ===================== Structural Utilities ====================== 01) VASP Input-Files Generator 02) Mechanical Properties 03) K-Path for Band-Structure 04) Structure Editor 05) Catalysis-ElectroChem Kit 06) Symmetry Analysis 07) Materials Databases 08) Advanced Structure Models ===================== Electronic Utilities ====================== 11) Density-of-States 21) Band-Structure 23) 3D Band-Structure 25) Hybrid-DFT Band-Structure 26) Fermi-Surface 28) Band-Structure Unfolding 31) Charge-Density Analysis 42) Potential Analysis 44) Piezoelectric Properties 51) Wave-Function Analysis 62) Magnetic Analysis 65) Spin-Texture 68) Transport Properties ======================== Misc Utilities ========================= 71) Optical Properties 72) Molecular-Dynamics Kit 74) User Interface 78) VASP2other Interface 84) ABACUS Interface 91) Semiconductor Kit 92) 2D-Material Kit 95) Phonon Analysis 0) Quit ------------\u0026gt;\u0026gt; 2 =================== Mechanical Options ========================== 200) Elastic-Constants Using Stress-Strain Method 201) Elastic-Constants Using Energy-Strain Method 202) Mechanical Properties from ELASTIC_TENSOR(_2D).in file 203) Elastic-Constants and Mechanical Properties from OUTCAR file 204) Spatial-Dependent Mechanics from ELASTIC_TENSOR(_2D).in file 205) Equation-of-State Fitting 0) Quit 9) Back ------------\u0026gt;\u0026gt; 先输入203，再204，即可得到MECHANICS_3D.dat\n要将该数据绘制成3维图像，可以借助vaspkit中example所带matlab脚本，具体路径在vaspkit/examples/angular_dependent_mechanics/mechanics_3d_plot_matlab.m (VASPKIT ver. \u0026gt;= 1.3.2)\n绘制三维图像 最好在有GUI情况下使用该脚本，尝试过在集群运行无GUI模式无法成功，也尝试过修改代码将图像保存为图片也无法成功，如果有好办法在集群使用欢迎指导。\n具体办法在自己电脑安装Matlab运行脚本，即可成功。\nmatlab命令行输入：mechanics_3d_plot_matlab,输入2，选择绘制杨氏模量。\n得到：\n修改图片并导出\n附录 参考文章 第一性原理||计算不同晶系的弹性常数和弹性模量-模拟计算-科学指南针 第一性原理||计算弹性常数的两种方法-模拟计算-科学指南针 根据弹性常数计算和三维可视化材料力学量 - VASPKIT与量化软件 ","date":"2025-01-08T20:13:35+08:00","permalink":"https://allergicrosen.fun/p/elastic-constants/","title":"弹性常数计算"},{"content":"NAMD计算 记录计算NAMD过程的一些笔记以及注意事项(只记录计算步骤，不涉及背后原理，因为我自己也没搞明白，后续可能会有完善)\n基于凯峰给的NAMD-example\nNAMD_example Mode LastWriteTime Length Name ---- ------------- ------ ---- dar--l 2024/12/10 0:52 NA_couplings dar--l 2024/12/10 0:52 step1 dar--l 2024/12/10 0:52 step2 dar--l 2024/12/10 0:52 step3 dar--l 2024/12/10 0:52 vasp.5.4.4-nac-intel -a---l 2022/11/19 10:39 390 readme NAC计算大致分为三步\n跑MD（包括heating部分和MD部分） 将MD获得的轨迹分割成5000个POSCAR，并对每个POSCAR进行一遍scf（pyxaid一定要单k点跑） 计算寿命，退相干 其中NA_couplings包含计算所需脚本及可执行文件\nStep1，进行vasp的MD计算 heating step1下包含heating和MD\n$ ls heating MD MD过程包含heating和MD两个部分\nheating过程主要使结构在300K下跑1000步（或者500步），并写入WAVECAR,INCAR设置如下：\nSYSTEM = crystal #ISYM = 0 ENCUT = 500 #和先前计算保持一致 LREAL = A ISTART = 0 ISYM = 0 NELM = 200 NPAR = 6 ICHARG = 2 ISMEAR = 0 #feimi 0 gass SIGMA = 0.02 EDIFF = 1E-4 #can be modified NBANDS = 846 # should be modified grep NABNDS OUTCAR PREC = M # Low | Medium | High | Normal | Accurate | Single ##################### MD Ionic Relaxation####################### IBRION=0 #(df:0/(-1 if NSW=0/1))relax method,non:-1,MD:0,CG:2. POTIM=1.0 #(df:0.5)controll the length of the trial step for ionic relax. ISIF=2 #(df:2)Control what to relax. usually:0,all:3. NSW=1000 #(df:0)max. ion relax steps. EDIFFG=-0.01 #(df:EDIFF*10)ionic rel. brake cond. loop force:(-),Ener.(+) NELMIN=6 #(df:2)minimum steps of electronic SC. ALGO = N # FAST is faster than Normal NBLOCK = 4 TEBEG=300 TEEND=300 SMASS=-1 #-1 heating;-3 normal MD.controls the velocities during an ab-initio molecular dynamics ######################Write Flags############################ LWAVE = .T. LCHARG = .FALSE. IVDW = 12 NWRUTE = 1 根据自己需求可以适当修改，使用vasp_gam进行计算\nMD MD过程的POSCAR为计算完heating的CONTCAR，且需要读取heating的WAVECAR ICNAR设置如下：\nSYSTEM = crystal #ISYM = 0 ENCUT = 500 #和先前计算保持一致 LREAL = A ISTART = 1 ISYM = 0 NELM = 120 NPAR = 8 ICHARG = 2 ISMEAR = 0 #feimi 0 gass SIGMA = 0.02 EDIFF = 1E-4 #can be modified #NBANDS = 856 # should be modified grep NABNDS OUTCAR PREC = M # Low | Medium | High | Normal | Accurate | Single ##################### MD Ionic Relaxation####################### IBRION=0 #(df:0/(-1 if NSW=0/1))relax method,non:-1,MD:0,CG:2. POTIM=1.0 #(df:0.5)controll the length of the trial step for ionic relax. ISIF=2 #(df:2)Control what to relax. usually:0,all:3. NSW=5020 #(df:0)max. ion relax steps. EDIFFG=-0.01 #(df:EDIFF*10)ionic rel. brake cond. loop force:(-),Ener.(+) NELMIN=6 #(df:2)minimum steps of electronic SC. ALGO = N # FAST is faster than Normal NBLOCK = 1 TEBEG=300 TEEND=300 SMASS=-3 #-1 heating;-3 normal MD.controls the velocities during an ab-initio molecular dynamics ######################Write Flags############################ LWAVE = .F. LCHARG = .FALSE. IVDW = 12 MD过程NSW离子步设置为5020，使用vasp_gam计算\n计算完成后，需要将MD的轨迹拆分为一个一个POSCAR，可以使用脚本实现。\n轨迹文件在MD目录下生成的XDATCAR，脚本位于NA_couplings文件夹下的gxdatpos\n需要将脚本和轨迹文件放入/step2/pfile/, 然后执行脚本拆分轨迹，获得所需的5020个结构\n需要注意：MD跑完后一定要检查轨迹(导入至VMD中)，看看结构是否正常，否则后续跑NAMD没啥意义\n接下来计算NAC\nStep2，进行NAC计算(单K点!!!) NAC计算非常耗时，成本高，一定要时刻注意是否计算正确，提交任务前一定要检查好参数，尤其是:\nMINB=168 #一定要记得修改！！！ MAXB=177 一定要和EIGENVAL里面保持一致，在SOC或者扩胞后会有变化。\nstep2目录下，有如下文件:\n$ ls combine_complex.py NAC pfile readme real energy name.py read-en-diff-vasp.pl read-nac-vasp.pl res 首先先计算NAC\nNAC目录下，有如下文件：\n$ ls FIRSTCAR readme nac.sh STARTCAR $ cat FIRSTCAR Step 1 adiabatic MD INCAR ISTART=0 ALGO=N #VASP relaxation algorithm NELMDL=-2 LWAVE = .TRUE. LCHARG = .FALSE. LREAL = A NPAR = 8 PREC=M ISMEAR= 0 #set to 0 for partial occupencies of wavefunction have Gaussian smearing SIGMA=0.02 ISYM = 0 #symmetry not considered in calculation NSW=0 EDIFF= 1E-4 EDIFFG=-0.01 IVDW = 12 $ cat STARTCAR Step 1 adiabatic MD INCAR ISTART=1 ALGO=N #VASP relaxation algorithm NELMDL=-2 LWAVE = .TRUE. LCHARG = .FALSE. LREAL = A NPAR = 8 PREC=M ISMEAR= 0 #set to 0 for partial occupencies of wavefunction have Gaussian smearing SIGMA=0.02 ISYM = 0 #symmetry not considered in calculation NSW=0 EDIFF= 1E-4 EDIFFG=-0.01 IVDW = 12 nac.sh脚本需要设置好路径，包括NA_couplings路径 pfile路径（有两处）\nMINB:电子可以激发的最低能量轨道 MAXB:电子可以激发的最高能量轨道 一般MINB设置为VBM占据轨道减去4,MAXB设置为CBM占据轨道加上4(可以在本征值文件EIGENVAL查到) （换了体系或者加了SOC后，一定一定一定记得修改这儿！！！） MINT和MAXT:起始步和结束步。（若要分段算最好第二段往前多算几步，比如1-2505；2500-5005）\n注意自己是用的vasp_gam还是vasp_std\n计算结束后检查energy文件行数和real文件夹中的real文件数是否是对的(多次计算生成的energy内容并不会被覆盖，而是会在末尾继续写入，一定要检查好)\n然后cp energy和real文件到/step2/energy文件和real文件夹\n$ cat nac.sh #!/bin/bash #SBATCH -J ljb-nac # 作业名 #SBATCH -o out.%j # 标准输出文件（%j 为作业 ID） #SBATCH -e err.%j # 标准错误文件 #SBATCH -p mars # 分区名称 #SBATCH -N 1 # 申请 1 个节点 #SBATCH --ntasks-per-node=64 # 每个节点 64 个任务 #SBATCH -t 07-23:57:25 # 运行时间限制 (7天23小时57分25秒) # 加载必要的模块 module purge module load intel/oneapi2023.2_noimpi module load mpi/mpich/4.1.2-gcc-11.4.0-ch4 # 设置 VASP 路径 export PATH=/GLOBALFS/caep_lts_qrhzh_1/liaojinbo/soft/vasp.5.4.4-nac-intel/bin/:$PATH module list # 当前工作目录 cd $SLURM_SUBMIT_DIR echo \u0026#34;ENV Load Done\u0026#34; \u0026gt; Debug.log PATH=$PATH:/GLOBALFS/caep_lts_qrhzh_1/liaojinbo/soft/NA_couplings # puts perl scripts in path export $PATH # 参数设置 MINB=168 #一定要记得修改！！！ MAXB=177 MINT=1 MAXT=5000 total_k=1 TMSTP=1.0 # 打印参数 printf \u0026#34;\\n\\n======= INITIAL PARAMETERS (MINBAND MAXBAND MINTIME MAXTIME) ========\\n\u0026#34; printf \u0026#34;%10d%10d%10d%10d\\n\\n\u0026#34; $MINB $MAXB $MINT $MAXT rm -f billdata OS_STRENGTH in_SPECTRUM test_coupling_os coupling echo \u0026#34;Set up Calcs Done\u0026#34; \u0026gt;\u0026gt; Debug.log # 获取初始 POSCAR 文件 SUFX=$( printf \u0026#34;%04d\u0026#34; \u0026#34;$MINT\u0026#34; ) POSFILE=\u0026#34;p${SUFX}\u0026#34; cp ../pfile/$POSFILE POSCAR #可以更改为相对路径，就不需要每次计算都改这里了 cp FIRSTCAR INCAR # 执行 VASP 初始化计算 printf \u0026#34;Running VASP and getting initial set of good orbitals\\n\u0026#34; yhrun -N 1 -n 64 vasp_std \u0026gt; vasp.out 2\u0026gt; err cat vasp.out \u0026gt;\u0026gt; Debug.log cp WAVECAR WAVECAROLD cp WAVECAR WAVECARNEW cp OUTCAR OUTCAR_total echo \u0026#34;Set Good ORBITALS Done\u0026#34; \u0026gt;\u0026gt; Debug.log # 逐步计算 NAC (( MINT++ )) for i in $(seq $MINT $MAXT); do SUFX=$( printf \u0026#34;%04d\u0026#34; \u0026#34;$i\u0026#34; ) POSFILE=\u0026#34;p${SUFX}\u0026#34; cp ../pfile/$POSFILE POSCAR cp STARTCAR INCAR printf \u0026#34;Running VASP at t = $i fs\\n\u0026#34; yhrun -N 1 -n 64 vasp_std \u0026gt; vasp.out 2\u0026gt; err cat vasp.out \u0026gt;\u0026gt; Debug.log mv WAVECARNEW WAVECAROLD cp WAVECAR WAVECARNEW cat OUTCAR \u0026gt;\u0026gt; OUTCAR_total printf \u0026#34;Getting band energies at t = $i fs\\n\u0026#34; state_energy_extractor_allk.pl $MINB $MAXB cat energy_by_band \u0026gt;\u0026gt; energy # 计算 NAC echo \u0026#34;Calculating the NAC among k points\u0026#34; \u0026gt;\u0026gt; Debug.log yhrun -N 1 -n 16 ovlap_NORM_OS_allk_mpi $MINB $MAXB $TMSTP $total_k $SUFX \u0026gt;\u0026gt; Debug.log rm -f billdata OS_STRENGTH in_SPECTRUM test_coupling_os # 合并 real 文件 for j in $(seq 1 $total_k); do mv \u0026#34;real${SUFX}_${j}_1\u0026#34; \u0026#34;real${SUFX}_${j}\u0026#34; for k in $(seq 2 $total_k); do paste \u0026#34;real${SUFX}_${j}\u0026#34; \u0026#34;real${SUFX}_${j}_${k}\u0026#34; \u0026gt; temp mv temp \u0026#34;real${SUFX}_${j}\u0026#34; rm -f \u0026#34;real${SUFX}_${j}_${k}\u0026#34; done done mv \u0026#34;real${SUFX}_1\u0026#34; \u0026#34;real${SUFX}\u0026#34; for j in $(seq 2 $total_k); do cat \u0026#34;real${SUFX}_${j}\u0026#34; \u0026gt;\u0026gt; \u0026#34;real${SUFX}\u0026#34; rm -f \u0026#34;real${SUFX}_${j}\u0026#34; done done echo \u0026#34;Combine the real files Done\u0026#34; \u0026gt;\u0026gt; Debug.log # 将 real 文件移入目录 (( MINT-- )) REALDIR=\u0026#34;REAL_${MINT}_${MAXT}\u0026#34; mkdir -p $REALDIR mv real* $REALDIR/ echo \u0026#34;Finish\u0026#34; \u0026gt;\u0026gt; Debug.log 可以看到，NAC计算过程还是比较复杂的，在nac.sh脚本帮助下可以大大提高效率。\n计算完成，会在当前目录下创建REALDIR=\u0026quot;REAL_${MINT}_${MAXT}\u0026quot;目录，并将计算得到的real文件移动到此。\n确保step2目录下含: combine_complex.py和name.py，如果没有res文件夹则mkdir res\n使用combine_complex.py脚本在real文件夹中生成哈密顿量的实部和虚部，然后cp real文件夹的实部和虚部到res文件夹\n接着运行name.py,将res文件夹中的文件顺序减2，运行cp.py(记得修改复制循环次数),当然也可以一键运行gennaccopy.sh，省的自己动手。(别忘了这一步，否则namd计算会报错)\n获取带隙波动和NAC：可以将read-en-diff-vasp.pl和read-nac-vasp.pl脚本放到step2最终的res文件，执行这两个脚本得到en-diff.dat和nac.dat。(注意：nac.dat的数值需要取绝对值并算平均值。)\nstep3 获取Population，Dephasing和Spectral_density（基于Pyxaid） step3包含如下文件：\ntotal 329 0 Dec 24 17:02 err.273230 11776 Dec 23 16:41 FFT 11776 Dec 24 17:00 macro 916 Dec 23 16:41 name_new1.py 916 Dec 23 16:41 name_new2.py 916 Dec 23 16:41 name_new3.py 11776 Dec 23 16:41 out 6146 Dec 24 17:02 out.273230 8507 Dec 24 17:07 py-scr3.py 811 Dec 24 17:01 pyxaid-slurm.sh 1596 Dec 24 17:20 readme 12800 Dec 24 17:08 res 12800 Dec 24 16:59 res1 13824 Dec 24 16:59 res2 13824 Dec 24 16:59 res3 旧脚本\nname_new.py作用为复制哈密顿文件并重命名，以5000为例，需要复制3次，得到3个res1，res2，res3。如，设初始res顺序为ABC,则经过脚本处理后res1为ABCBA,res2为ABCBC,res3为ABCAB,将res1、2、3中所有文件cp到新的res文件，会去掉相同的部分，最终得到ABCBABCBA。\n使用name_new.py需要python2.7版本，python3会报错不兼容。\npy-scr3.py脚本（需要修改部分：i, i+namdtime要小于res文件的实部或虚部数量） res1,res2,res3，（为step2的res cp 的，对应与name_new（1，2，3）.py脚本）\n旧脚本\n根据自己需求修改py-scr3.py\n其中py-scr3.py内容为:\n$ cat py-scr3.py from PYXAID import * #from pyxaid_core import * import os print(\u0026#39;import Done\u0026#39;) ############################################################################################# # Input section: Here everything can be defined in programable way, not just in strict format ############################################################################################# print(\u0026#39;Init Params!\u0026#39;) params = {} # Define general control parameters (file names, directories, etc.) # Path to Hamiltonians # These paths must direct to the folder that contains the results of # the step2 calculations (Ham_ and (optinally) Hprime_ files) and give # the prefixes and suffixes of the files to read in rt =os.getcwd() params[\u0026#34;Ham_re_prefix\u0026#34;] = rt+\u0026#34;/res/0_Ham_\u0026#34; params[\u0026#34;Ham_re_suffix\u0026#34;] = \u0026#34;_re\u0026#34; params[\u0026#34;Ham_im_prefix\u0026#34;] = rt+\u0026#34;/res/0_Ham_\u0026#34; params[\u0026#34;Ham_im_suffix\u0026#34;] = \u0026#34;_im\u0026#34; params[\u0026#34;Hprime_x_prefix\u0026#34;] = rt + \u0026#34;/res/0_Hprime_\u0026#34; params[\u0026#34;Hprime_x_suffix\u0026#34;] = \u0026#34;x_re\u0026#34; params[\u0026#34;Hprime_y_prefix\u0026#34;] = rt + \u0026#34;/res/0_Hprime_\u0026#34; params[\u0026#34;Hprime_y_suffix\u0026#34;] = \u0026#34;y_re\u0026#34; params[\u0026#34;Hprime_z_prefix\u0026#34;] = rt + \u0026#34;/res/0_Hprime_\u0026#34; params[\u0026#34;Hprime_z_suffix\u0026#34;] = \u0026#34;z_re\u0026#34; params[\u0026#34;energy_units\u0026#34;] = \u0026#34;Ry\u0026#34; # This specifies the units of the Hamiltonian matrix elements as they # are written in Ham_ files. Possible values: \u0026#34;Ry\u0026#34;, \u0026#34;eV\u0026#34; # Set up other simulation parameters: # Files and directories (apart from the Ham_ and Hprime_) params[\u0026#34;scratch_dir\u0026#34;] = os.getcwd()+\u0026#34;/out\u0026#34; # Hey! : you need to create this folder in the current directory # This is were all (may be too many) output files will be written params[\u0026#34;read_couplings\u0026#34;] = \u0026#34;batch\u0026#34; # How to read all input (Ham_ and Hprime_) files. Possible values: # \u0026#34;batch\u0026#34;, \u0026#34;online\u0026#34; # Simulation type params[\u0026#34;runtype\u0026#34;] = \u0026#34;namd\u0026#34; # Type of calculation to perform. Possible values: # \u0026#34;namd\u0026#34; - to do NA-MD calculations, \u0026#34;no-namd\u0026#34;(or any other) - to # perform only pre-processing steps - this will create the files with # the energies of basis states and will output some useful information, # it may be particularly helpful for preparing your input params[\u0026#34;decoherence\u0026#34;] = 1 # Do you want to include decoherence via DISH? Possible values: # 0 - no, 1 - yes params[\u0026#34;is_field\u0026#34;] = 0 # Do you want to include laser excitation via explicit light-matter # interaction Hamiltonian? Possible values: 0 - no, 1 - yes # Integrator parameters params[\u0026#34;elec_dt\u0026#34;] = 1.0 # Electronic integration time step, fs params[\u0026#34;nucl_dt\u0026#34;] = 1.0 # Nuclear integration time step, fs (this parameter comes from # you x.md.in file) params[\u0026#34;integrator\u0026#34;] = 0 # Integrator to solve TD-SE. Possible values: 0, 10,11, 2 # NA-MD trajectory and SH control params[\u0026#34;namdtime\u0026#34;] = 2000 # Trajectory time, fs 计算步数，需要修改 params[\u0026#34;num_sh_traj\u0026#34;] = 300 # Number of stochastic realizations for each initial condition params[\u0026#34;boltz_flag\u0026#34;] = 1 # Boltzmann flag (set to 1 anyways) params[\u0026#34;Temp\u0026#34;] = 300.0 # Temperature of the system params[\u0026#34;alp_bet\u0026#34;] = 0 # How to treat spin. Possible values: 0 - alpha and beta spins are not # coupled to each other, 1 - don\u0026#39;t care about spins, only orbitals matter params[\u0026#34;debug_flag\u0026#34;] = 0 # If you want extra output. Possible values: 0, 1, 2, ... # as the number increases the amount of the output increases too # Be carefull - it may result in a huge output! print(\u0026#39;Parameters of the field (if it is included)\u0026#39;) # Parameters of the field (if it is included) params[\u0026#34;field_dir\u0026#34;] = \u0026#34;xyz\u0026#34; # Direction of the field. Possible values: \u0026#34;x\u0026#34;,\u0026#34;y\u0026#34;,\u0026#34;z\u0026#34;,\u0026#34;xy\u0026#34;,\u0026#34;xz\u0026#34;,\u0026#34;yz\u0026#34;,\u0026#34;xyz\u0026#34; params[\u0026#34;field_protocol\u0026#34;] = 1 # Envelope function. Possible values: 1 - step function, 2 - saw-tooth params[\u0026#34;field_Tm\u0026#34;] = 25.0 # Middle of the time interval during which the field is active params[\u0026#34;field_T\u0026#34;] = 25.0 # The period (duration) of the field pulse params[\u0026#34;field_freq\u0026#34;] = 3.0 # The frequency of the field radiation = energy of the photons params[\u0026#34;field_freq_units\u0026#34;] = \u0026#34;eV\u0026#34; # Units of the above quantity. Possible values: \u0026#34;eV\u0026#34;, \u0026#34;nm\u0026#34;,\u0026#34;1/fs\u0026#34;,\u0026#34;rad/fs\u0026#34; params[\u0026#34;field_fluence\u0026#34;] = 1.0 # Defines the light radiation intensity (fluence), mJ/cm^2 print(\u0026#39;Params Done!\u0026#39;) # Define states: # Example of indexing convention with Nmin = 5, HOMO = 5, Nmax = 8 # the orbitals indices are consistent with QE (e.g. PP or DOS) indexing, which starts from 1 # [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] - all computed orbitals # [ 1, 2, 3, 4, 5, 6] - occupied orbitals # [ 7, 8, 9, 10, 11] - unoccupied orbitals # [5, 6, 7, 8] - active space print(\u0026#39;Set active space and the basis states\u0026#39;) # Set active space and the basis states params[\u0026#34;active_space\u0026#34;] = [4,5,6,7] params[\u0026#34;states\u0026#34;] = [] params[\u0026#34;states\u0026#34;].append([\u0026#34;GS\u0026#34;,[4,-4,5,-5],0.00]) # ground state params[\u0026#34;states\u0026#34;].append([\u0026#34;S1\u0026#34;,[4,-4,5,-6],0.00]) # excited state -5 -\u0026gt; -6 print(\u0026#39;Initial conditions\u0026#39;) # Initial conditions nmicrost = len(params[\u0026#34;states\u0026#34;]) ic = [] i = 0 while i\u0026lt;1000: j = 0 while j\u0026lt;nmicrost: ic.append([i,j]) j = j + 1 i = i + 10 params[\u0026#34;iconds\u0026#34;] = ic ############################################################################################# # Execution section: Here we actually start the NA-MD calculations and the analysis ############################################################################################# print(\u0026#39;Run calculations\u0026#39;) ############ Run calculations ###################### print params # print out all simulation parameters first print(\u0026#39;\\t\u0026#39;) print(\u0026#39;print params\u0026#39;) print(\u0026#39;\\t\u0026#39;) pyxaid_core.info().version() print(\u0026#39;\\t\u0026#39;) print(\u0026#39;pyxaid_core.info done\u0026#39;) print(\u0026#39;\\t\u0026#39;) pyxaid_core.namd(params) print(\u0026#39;\\t\u0026#39;) print(\u0026#39;pyxaid_core.namd done\u0026#39;) print(\u0026#39;\\t\u0026#39;) print(\u0026#39;\u0026#39;) print(\u0026#39;Below we will be using the average.py module\u0026#39;) print(\u0026#39;\u0026#39;) ########### Below we will be using the average.py module ######## # Note: If you want to re-run averaging calculations - just comment out the line # calling namd() functions (or may be some other unnecessary calculations) Nstates = len(params[\u0026#34;states\u0026#34;]) # Total number of basis states inp_dir = os.getcwd()+\u0026#34;/out\u0026#34; # this is the directory containing the input for this stage # it is the directory where pyxaid_core.namd() has written all # it output (raw output) opt = 12 # Defines the type of the averaging we want to do. Possible values: # 1 - average over intial conditions, independnetly for each state # 2 - sum the averages for groups of states (calculations with opt=1 must # already be done). One can do this for different groups of states without # recomputing initial-conditions averages - they stay the same # 12 - do the steps 1 and 2 one after another print(\u0026#39;\u0026#39;) print(\u0026#39;Define the groups of states for which we want to know the total population as a function of time\u0026#39;) print(\u0026#39;\u0026#39;) # Define the groups of states for which we want to know the total population as a function of time MS = [] for i in range(0,Nstates): MS.append([i]) # In our case - each group of states (macrostate) contains only a single basis configuration # (microstate) res_dir = os.getcwd()+\u0026#34;/macro\u0026#34; # Hey! : you need to create this folder in the current directory # This is where the averaged results will be written print(\u0026#39;\u0026#39;) print(\u0026#39; Finally, run the averaging\u0026#39;) print(\u0026#39;\u0026#39;) # Finally, run the averaging average.average(params[\u0026#34;namdtime\u0026#34;],Nstates,params[\u0026#34;iconds\u0026#34;],opt,MS,inp_dir,res_dir) 结果分析： 获取Population：\n进入macro文件夹，数据位于sh_pop_ex1中，x轴为第二列，y轴为第6列。\n获取Dephasing和Spectral_density：\n先在step3建一个FFT文件夹，然后进去out文件夹，cp icond0pair0_1Dephasing_function.txt(1列x轴数据，3列为y轴数据)和icond0pair0_1Spectral_density.txt（4列为x轴数据，8列为y轴数据）文件到FFT文件夹\n绘制图 源数据导入到origin中\nPop： 载流子寿命：\n圈起来的那两列为所需数据\npop.dat\n绘制后应该是从1下降，斜率为K, -1/K为寿命（单位为 fs） pop.img\n要得到K,需要使用origin拟合斜率，y轴截距设置为1。\nfit\nDephasing: 退相干：\n将icond0pair0_1Dephasing_function.txt的第一和第三列作为x和y导入origin，绘制图。\ndephasing.img\n认为下降到0.6就是Dephasing time（单位 fs）\nSpectral_density: 振动谱：\n将icond0pair0_1Spectral_density.txt的第4列作为为x轴，第8列作为y轴）导入至origin，设置好x轴范围\n附录 pyxaid2/PYXAID2 at master · Quantum-Dynamics-Hub/pyxaid2 PYXAID Prof. Jin Zhao\u0026rsquo;s research group Teaching | Prof. Jin Zhao\u0026rsquo;s research group(Solid State Phyics Course) Jupyter Notebook Viewer（Hefei - NAMD） Qijing Zheng ","date":"2024-12-10T01:20:09+08:00","image":"https://quantum-dynamics-hub.github.io/pyxaid/pyxaid_logo.png","permalink":"https://allergicrosen.fun/p/namd/","title":"NAC计算"},{"content":"这是一个vasp.5.4.4的编译教程（以广州超算为例）\n准备好vasp.5.4.4安装包 自行下载，或者邮件给我留言 点击发送电子邮件至liaojinbo1999@163.com ，vasp为商业软件，请确保有授权！\n好了，准备好压缩包vasp.5.4.4.tar.gz，解压，进入解压后的目录。\ntar -zxvf vasp.5.4.4.tar.gz cd vasp.5.4.4/ ls发现有以下文件和目录\n$ ls arch bin build makefile README src arch/：该目录通常包含特定于硬件架构的配置文件，例如针对不同操作系统和硬件架构的Makefile模板。你可以在这里选择或创建适合你系统的配置文件。\nbin/：该目录通常为空，或者包含最终编译的VASP可执行文件。在编译完成后，VASP的可执行文件会放在这个目录下。\nbuild/：此目录通常包含用于编译过程的临时文件。编译时会生成对象文件和中间文件，最终会被链接到 bin/ 目录中的可执行文件(std、gam、ncl)。\nmakefile：这个文件是VASP的主Makefile，包含编译VASP所需的各种参数设置和规则。你需要根据你系统的环境编辑这个文件以适应你的编译器和库。\nREADME：该文件通常包含VASP的安装说明、编译和运行的基本指导。在安装之前，建议阅读该文件。\nsrc/：这个目录包含VASP的源代码。编译时，所有源代码文件将被编译成目标文件，然后链接成最终的VASP可执行文件。\n配置环境 查看HPC已有的编译器 命令行输入module av\n$ module av --------------------------------------------------- /APP/u22/x86/modulepath/Compilers --------------------------------------------------- gcc/9.5.0 mpi/mpich/4.1.2-gcc-11.4.0-ch4 mpi/mpich/4.1.2-icx-oneapi2024.2-ch4-dbg intel/oneapi2023.2_impi mpi/mpich/4.1.2-gcc-11.4.0-ch4-dbg mpi/mpich/4.3.2-icc-oneapi2023.2-ch4 intel/oneapi2023.2_noimpi mpi/mpich/4.1.2-icc-oneapi2023.2-ch3-shared mpi/openmpi/4.1.1-icc-oneapi2023.2-ch4 intel/oneapi2024.2_impi mpi/mpich/4.1.2-icc-oneapi2023.2-ch4 mpi/openmpi/4.1.6-icc-oneapi2023.2-ch4 intel/oneapi2024.2_noimpi mpi/mpich/4.1.2-icc-oneapi2023.2-ch4-dbg mpi/openmpi/5.0.0-gcc-9.5.0-ch4 mpi/mpich/3.4.3-gcc-9.5.0-ch4 mpi/mpich/4.1.2-icx-oneapi2023.2-ch4 mpi/openmpi/5.0.0-gcc-11.4.0-ch4 mpi/mpich/4.1.2-gcc-9.5.0-ch4 mpi/mpich/4.1.2-icx-oneapi2023.2-ch4-dbg mpi/openmpi/5.0.0-icc-oneapi2023.2-ch4 mpi/mpich/4.1.2-gcc-9.5.0-ch4_openfoam mpi/mpich/4.1.2-icx-oneapi2023.2-ch4_openfoam mpi/openmpi/5.0.0-icx-oneapi2023.2-ch4 mpi/mpich/4.1.2-gcc-11.4.0-ch3 mpi/mpich/4.1.2-icx-oneapi2024.2-ch4 我需要使用Intel编译器和MPI编译环境，所以我选择加载这两个\nmodule purge module load intel/oneapi2023.2_impi module load mpi/mpich/4.1.2-gcc-11.4.0-ch4 module list 为了确保不与其它模块冲突，所以使用module purge最开始先卸载所有模块，为了确认是否成功加载模块，使用了module list命令 检查已加载的模块。\n进入arch目录下，选择所需的makefile文件\n$cd arch/ $ ls makefile.include.linux_gnu makefile.include.linux_intel makefile.include.linux_intel_serial makefile.include.linux_pgi 因为我使用intel的编译器，所以我将makefile.include.linux_intel复制到上一级目录，命名为makefile.include\n$ cp makefile.include.linux_intel ../makefile.include 打开上一级目录中自己刚复制过来的makefile.include发现其内容如下：\n# Precompiler options CPP_OPTIONS= -DHOST=\\\u0026#34;LinuxIFC\\\u0026#34;\\ -DMPI -DMPI_BLOCK=8000 \\ -Duse_collective \\ -DscaLAPACK \\ -DCACHE_SIZE=4000 \\ -Davoidalloc \\ -Duse_bse_te \\ -Dtbdyn \\ -Duse_shmem CPP = fpp -f_com=no -free -w0 $*$(FUFFIX) $*$(SUFFIX) $(CPP_OPTIONS) FC = mpiifort FCL = mpiifort -mkl=sequential -lstdc++ FREE = -free -names lowercase FFLAGS = -assume byterecl -w OFLAG = -O2 OFLAG_IN = $(OFLAG) DEBUG = -O0 MKL_PATH = $(MKLROOT)/lib/intel64 BLAS = LAPACK = BLACS = -lmkl_blacs_intelmpi_lp64 SCALAPACK = $(MKL_PATH)/libmkl_scalapack_lp64.a $(BLACS) OBJECTS = fftmpiw.o fftmpi_map.o fft3dlib.o fftw3d.o INCS =-I$(MKLROOT)/include/fftw ................ 这个文件是编译所需的环境，确保环境正常\n确保编译环境已加载（也就是前面提到的） module purge module load intel/oneapi2023.2_impi module load mpi/mpich/4.1.2-gcc-11.4.0-ch4 module list 不放心可以再次执行下，或者module list查看下\n开始编译 回到vasp主目录下，开始编译\n因为我需要std、gam、和ncl，所以我直接输入make all，如果没有问题那就会开始编译，等待即可（需要几十分钟）。\n编译完成进入./bin目录下,发现多了这三个执行文件，那么表示以及成功了。\n$ cd bin/;ls vasp_gam vasp_ncl vasp_std 设置环境变量 两种方法\n将vasp_gam vasp_ncl vasp_std所在路径添加到~/.bashrc（推荐使用） vi ~/.bashrc export PATH=/your path/vasp.5.4.4/bin/:$PATH source ~/.bashrc 将其写入脚本\n后续会讲到 测试 编译完后测试下是否能正常运行，准备好测试文件\n我这里准备了5个文件，分别为INCAR、POSCAR、POTCAR、KPOINTS、vasp-sbatch.sh\n脚本编写 在测试前，可能很多人并不知道如何编写一个合适的任务提交脚本，这里我简单介绍下脚本的编写规则\n查看官方手册 最简单的就是查看官方的手册，以广州超算来说，打开HPC1系统用户手册可以找到脚本的编写规则\n目前 HPC1 系统部署的资源管理系统包括多种作业提交方式，包括批处理作业提交方式 yhbatch 和交互作业提交方式 yhrun。作业终止方式为 yhcancel 命令，需要获取作业的 jobid，可以通过 yhq 命令查看获得。\n如果没有交互需求，请使用 yhbatch 提交任务。yhbatch 提交的作业终端关闭 时不会受到影响，登陆结点 down 机时也不会受到影响，强烈推荐使用 yhbatch 提 交任务。\nyhbatch 运行的主要格式如下：\nyhbatch [options] program yhbatch 包括多个选项，用户最常使用的选项如下：\n-n, --ntasks=ntasks 指定要运行的进程数。请求 yhrun 分配/加载 ntasks 个进程。省缺的情况是每 个 CPU 核运行一个进程，但是-c 参数将改变此省缺值。\n-N, --nodes=minnodes[-maxnodes] 请求为此作业至少分配 minnodes 个结点。调度器可能决定在多于 minnodes 个结点上启动作业。可以通过指定 maxnodes 限制最多分配的结点数（如“\u0026ndash; nodes=2-4”）。最少和最多结点数可以相同以便指定确切的结点数（如“\u0026ndash; nodes=2-2”将请求两个并且仅仅两个结点）。如果没有指定-N，省缺的行为是分 配足够的结点以满足-n 选项的要求。\n-p, --partition=partition 从分区 partition 请求资源。如未指定，则省缺为默认分区。\n-t, --time=minutes 设置作业的运行时间限制为 minutes 分钟。省缺值为分区的时间限制值。当到 达时间限制时，作业的进程将被发送 SIGTERM 以及 SIGKILL 信号终止执行。完 整格式为\u0026ndash;time=days-hours:minutes:seconds，建议包机时用户使用该选项。\n-D, --chdir=path\n加载的作业进程在执行前将工作目录改变到 path 。省缺情况下作业 yhrun 进 程的当前工作目录。\n-l, --label 在标准输出/标准错误的每行之前添加任务号。通常，远程任务的标准输出和 标准错误通过行缓冲直接传递到 yhrun 的标准输出和标准错误。\u0026ndash;label 选项将在 每行输出前面添加远程任务的 ID。\n-J, --job-name=jobname 指定作业的名字。省缺值是可执行程序的名字 program 。\n-W, --wait=seconds 指定在第一个任务退出后，到终止所有剩余任务之前的等待时间。0 表示无限 等待（60 秒后将发出一个警告）。省缺值可由系统配置文件中的参数设置。此选 项用于确保作业在一个或多个任务提前退出时能够及时终止。\n-w, --nodelist=nodelist|filename 请求指定列表中的结点。分配给作业的将至少包含这些结点。nodelist 可以是 逗号分割的结点列表或范围表达式（如 cn[1-5,7,12]）。如果包含“/”字符，则 nodelist 将会被当作是一个文件名，其中包含了所请求的结点列表。\n具体不多赘述了，有需要的可以向我要官方文档[ 点击发送电子邮件 ]\n编写脚本 以手册为例： sub.sh 如下：\n#!/bin/bash VASP_BIN=/your path/vasp.5.4.4/bin/vasp_std yhrun -n 28 -p TH_HPC1 $VASP_BIN 前面提到yhrun是交互提交作业,虽然可以提交任务，但是要保证窗口一直挂着，且不能断链，这显然是很不方便的，所以还需要yhbatch提交脚本。\n将脚本命名为run.sh:\n#!/bin/bash module purge module load intel/oneapi2023.2_impi module load mpi/mpich/4.1.2-gcc-11.4.0-ch4 module list export PATH=/your path/vasp.5.4.4/bin/:$PATH yhbatch -n 28 -p TH_HPC1 -J example1 ./sub.sh 自己写sbatch任务脚本 虽然以上脚本可以满足要求了，但是我还是觉得很麻烦，为什么我需要写两个脚本，我直接写一个多好，所以这是另一个方法，使用的是sbatch\n具体用法参照官方手册slurm官方手册 这是我自己的脚本：\n#!/bin/bash #SBATCH -J ljb ## Job Name #SBATCH -o out.%j ## standard output #SBATCH -e err.%j ## standard error #SBATCH -p mars ## Partition #SBATCH -N 1 ## Number of nodes #SBATCH --ntasks-per-node=64 ## Each node has n tasks #SBATCH -t 07-23:57:25 ## time for your job: 2 d，23 h ，57 min and 23 s module purge module load intel/oneapi2023.2 module load mpi/mpich/4.1.2-gcc-11.4.0-ch4 export PATH=/your path/vasp.5.4.4/bin/vasp_ncl:$PATH module list ulimit -s unlimited VASP_BIN=/your path/vasp.5.4.4/bin/vasp_std yhrun $VASP_BIN 运行测试 准备好vasp所需文件：\nls INCAR KPOINTS POSCAR POTCAR vasp-sbatch.sh sbatch vasp-sbatch.sh Submitted batch job 133974 squeue查看节点状态，显示R\nJOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 133974 mars ljb caep_lts R 1:28 1 cnode5131 显示已提交成功。\n检查OUTCAR或者out.133974（根据实际名字查看）文件是否正常运行\n$ tail out.133974 POSCAR found type information on POSCAR Pb I C N H POSCAR found : 5 types and 92 ions scaLAPACK will be used LDA part: xc-table for Pade appr. of Perdew POSCAR, INCAR and KPOINTS ok, starting setup FFT: planning ... WAVECAR not read entering main loop N E dE d eps ncg rms rms(c) DAV: 1 0.129655355373E+04 0.12966E+04 -0.13885E+05 17024 0.108E+03 顺利运行且无报错，完毕。\n","date":"2024-11-27T18:01:14+08:00","image":"https://allergicrosen.fun/p/vasp_compile/vasp_hu_fbc6db46ef87255b.webp","permalink":"https://allergicrosen.fun/p/vasp_compile/","title":"广州超算编译安装Vasp.5.4.4"},{"content":"Hugo在个人网站增加评论区的功能 Step1 :打开hugo主目录（前提已经部署好） Step2 :打开hugo.yaml配置文件，移到comments: comments: enabled: true provider: utterances disqusjs: shortname: apiUrl: apiKey: admin: adminLabel: utterances: repo: allergicrosen/myblog issueTerm: pathname label: beaudar: repo: issueTerm: pathname label: theme: remark42: host: site: locale: vssue: platform: owner: repo: clientId: clientSecret: autoCreateIssue: false 确保\nenabled: true provider: utterances 其它的不用可以删掉，保留\nutterances: repo: GitHub名字/静态网页仓库名字（一定注意仓库名字后面什么都不要加） issueTerm: pathname Step3 :为你所需要的仓库配置utterances 打开链接https://github.com/apps/utterances 登录验证，按照提示操作，选择所需仓库进行安装\n完毕后检查是否安装：所需仓库-\u0026gt;Settings-\u0026gt;Integrations-\u0026gt;Github Apps里可以看到utterances。\nStep4 :重新生成public(hugo.exe在主目录) ./hugo.exe server-D 此时应该已经成功了。\n","date":"2024-10-17T00:00:00Z","image":"https://allergicrosen.fun/p/hugo/cover_hu_ce5843295186a595.png","permalink":"https://allergicrosen.fun/p/hugo/","title":"hugo增加utterances功能"},{"content":"\n所需东西有： 微信开发者工具 本项目源码 有一定的HTML+CSS+Javascript的经验（小程序与网页设计非常类似） 安装node.js 申请注册微信公众平台：微信公众平台 好了，正式开始 获取源码 这位大佬做的源码UxxHans/Rainbow-Cats-Personal-WeChat-MiniProgram 其实按照他的教程基本上就可以自己部署好了，不过我自己修改增加了一些功能\n这是原本的主页及其它页面见以上链接\n修改的主要是主页，增加了一个轮转的图册，优化了样式，增加开盲盒功能等等。。。\n好的废话不多说，继续。\n微信开发者工具导入源码 打开微信开发者工具，导入解压目录\nd----- 2024/10/15 17:26 cloudfunctions d----- 2024/10/14 16:02 miniprogram d----- 2024/10/14 17:20 node_modules d----- 2024/10/14 16:02 Pics -a---- 2023/8/15 21:15 551 .eslintrc.js -a---- 2023/8/15 21:15 13 .gitignore -a---- 2023/8/15 21:15 1069 LICENSE -a---- 2024/10/14 17:20 80249 package-lock.json -a---- 2024/10/14 17:20 58 package.json -a---- 2024/10/15 11:00 1899 project.config.json -a---- 2024/10/14 16:09 359 project.private.config.json -a---- 2023/8/15 21:15 5891 README.md 注意应当是导入这个目录\nd----- 2024/10/14 16:02 miniprogram 因为作者写的云函数，所以需要用到云开发工具，点击左上角的云开发按钮\n云开发是收费的，不过第一个月可以白嫖，可以开了后把自动续费关掉\n这个目录就是存放所有云函数的文件夹，\nd----- 2024/10/15 17:26 cloudfunctions 注意到这里需要运行cloudfunctions/Install-WX-Server-SDK.bat，然后一个一个将函数上传。（请注意其它所需操作我并未列出，因为UxxHan大佬源码主页有明确过程）\n其实到这一步基本全部完成了，按作者要求填写好自己和对方_openid就行了\n这里主要讲下订阅微信通知需要怎么做\n订阅通知 来到微信小程序平台微信小程序平台 点击基础功能———订阅消息，去挑选一个适合自己的模板\n复制模板ID到miniprogram/pages/MainPage/index.js和miniprogram/pages/MissionAdd/index.js里把模板号换成自己想要的模板号 记得在cloudfunctions/information/index.js里把UserA和UserB的openid值替换\n样式和内容修改 如果你并不喜欢这些页面内容，修改index.wxml,修改样式，修改index.wxss，增加新功能等等，修改index.js\n导航栏名字和图标修改只需要修改miniprogram/app.json文件\n代码提交 右上角上传按钮就行了，记得去微信小程序平台提交审核并发布。\n相关链接\nHTML菜鸟教程 Javascript菜鸟教程 CSS菜鸟教程 ","date":"2024-10-17T00:00:00Z","image":"https://allergicrosen.fun/p/%E5%8A%A8%E6%89%8B%E5%81%9A%E4%B8%80%E4%B8%AA%E5%92%8C%E5%A5%B3%E6%9C%8B%E5%8F%8B%E4%BA%92%E5%8A%A8%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/WeChatminiprogram_hu_ddbfd2eda7b2425.webp","permalink":"https://allergicrosen.fun/p/%E5%8A%A8%E6%89%8B%E5%81%9A%E4%B8%80%E4%B8%AA%E5%92%8C%E5%A5%B3%E6%9C%8B%E5%8F%8B%E4%BA%92%E5%8A%A8%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/","title":"动手做一个和女朋友互动的微信小程序"},{"content":"本人咸鱼，有空就更，没空就在划水 主要记录一些想法，日常，还有知识分享。\n个人喜欢的一首歌 三月走过 柳絮散落\n恋人们匆匆\n我的爱情 闻风不动\n翻阅昨日 仍有温度\n蒙尘的心事\n恍恍惚惚 已经隔世\n遗憾无法说 惊觉心一缩\n紧紧握着 青花信物\n信守着承诺\n离别总在 失意中度过\n记忆油膏 反复涂抹\n无法愈合的伤口\n你的回头 划伤了沉默\n那夜重逢 停止漂泊\n你曾回来过\n相濡相忘 都是疼痛\n只因昨日 善良固执\n委屈着彼此\n打碎信物 取消来世\n遗憾无法说 惊觉心一缩\n紧紧握着 青花信物\n信守着承诺\n离别总在 失意中度过\n记忆油膏 反复涂抹\n无法愈合的伤口\n你的回头 划伤了沉默\n紧紧握着 青花信物\n雕刻着寂寞\n就好像我 无主的魂魄\n纠缠过往 无端神伤\n摔碎谁也带不走\n你我一场 唤不醒的梦\n紧紧握着 青花信物\n信守着承诺\n离别总在 失意中度过\n记忆油膏 反复涂抹\n无法愈合的伤口\n你的回头 划伤了沉默\n紧紧握着 青花信物\n雕刻着寂寞\n就好像我 无主的魂魄\n纠缠过往 无端神伤\n摔碎谁也带不走\n你我一场 唤不醒的梦\n青花 - 周传雄 ","date":"2024-09-09T00:00:00Z","image":"https://allergicrosen.fun/p/%E9%9A%8F%E7%AC%94/wallhaven-x6r1wd_hu_e3b97114ff8f1ced.jpg","permalink":"https://allergicrosen.fun/p/%E9%9A%8F%E7%AC%94/","title":"博客网站"}]